{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"feature_crosses.ipynb의 사본","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"/v2/external/notebooks/mlcc/feature_crosses.ipynb","timestamp":1521624702725}],"collapsed_sections":["ZTDHHM61NPTw","0i7vGo9PTaZl","copyright-notice"]}},"cells":[{"metadata":{"id":"copyright-notice","colab_type":"text"},"cell_type":"markdown","source":["#### Copyright 2017 Google LLC."]},{"metadata":{"id":"copyright-notice2","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}},"cellView":"both"},"cell_type":"code","source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":0,"outputs":[]},{"metadata":{"id":"g4T-_IsVbweU","colab_type":"text"},"cell_type":"markdown","source":[" # 특성 교차"]},{"metadata":{"id":"F7dke6skIK-k","colab_type":"text"},"cell_type":"markdown","source":[" **학습 목표:**\n","  * 합성 특성을 추가하여 선형 회귀 모델을 개선한다(이전 실습에서 계속 진행)\n","  * 입력 함수를 사용하여 `DataFrame` 개체를 `Tensors`로 변환하고 `fit()` 및 `predict()` 작업에서 입력 함수를 호출한다\n","  * 모델 학습에 FTRL 최적화 알고리즘을 사용한다\n","  * 원-핫 인코딩, 비닝, 특성 교차를 통해 새 합성 특성을 만든다"]},{"metadata":{"id":"NS_fcQRd8B97","colab_type":"text"},"cell_type":"markdown","source":[" ## 설정"]},{"metadata":{"id":"4IdzD8IdIK-l","colab_type":"text"},"cell_type":"markdown","source":[" 우선 이전 실습과 마찬가지로 입력을 정의하고 데이터 로딩 코드를 만들겠습니다."]},{"metadata":{"id":"CsfdiLiDIK-n","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import math\n","\n","from IPython import display\n","from matplotlib import cm\n","from matplotlib import gridspec\n","from matplotlib import pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from sklearn import metrics\n","import tensorflow as tf\n","from tensorflow.python.data import Dataset\n","\n","tf.logging.set_verbosity(tf.logging.ERROR)\n","pd.options.display.max_rows = 10\n","pd.options.display.float_format = '{:.1f}'.format\n","\n","california_housing_dataframe = pd.read_csv(\"https://storage.googleapis.com/mledu-datasets/california_housing_train.csv\", sep=\",\")\n","\n","california_housing_dataframe = california_housing_dataframe.reindex(\n","    np.random.permutation(california_housing_dataframe.index))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"10rhoflKIK-s","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def preprocess_features(california_housing_dataframe):\n","  \"\"\"Prepares input features from California housing data set.\n","\n","  Args:\n","    california_housing_dataframe: A Pandas DataFrame expected to contain data\n","      from the California housing data set.\n","  Returns:\n","    A DataFrame that contains the features to be used for the model, including\n","    synthetic features.\n","  \"\"\"\n","  selected_features = california_housing_dataframe[\n","    [\"latitude\",\n","     \"longitude\",\n","     \"housing_median_age\",\n","     \"total_rooms\",\n","     \"total_bedrooms\",\n","     \"population\",\n","     \"households\",\n","     \"median_income\"]]\n","  processed_features = selected_features.copy()\n","  # Create a synthetic feature.\n","  processed_features[\"rooms_per_person\"] = (\n","    california_housing_dataframe[\"total_rooms\"] /\n","    california_housing_dataframe[\"population\"])\n","  return processed_features\n","\n","def preprocess_targets(california_housing_dataframe):\n","  \"\"\"Prepares target features (i.e., labels) from California housing data set.\n","\n","  Args:\n","    california_housing_dataframe: A Pandas DataFrame expected to contain data\n","      from the California housing data set.\n","  Returns:\n","    A DataFrame that contains the target feature.\n","  \"\"\"\n","  output_targets = pd.DataFrame()\n","  # Scale the target to be in units of thousands of dollars.\n","  output_targets[\"median_house_value\"] = (\n","    california_housing_dataframe[\"median_house_value\"] / 1000.0)\n","  return output_targets"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ufplEkjN8KUp","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{"item_id":1},{"item_id":2},{"item_id":3},{"item_id":4},{"item_id":5},{"item_id":6},{"item_id":7},{"item_id":8}],"base_uri":"https://localhost:8080/","height":1205},"outputId":"08c86a21-7f74-4196-8e48-d884438fa605","executionInfo":{"status":"ok","timestamp":1521687332381,"user_tz":-540,"elapsed":573,"user":{"displayName":"오용택","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"102971030941554054553"}}},"cell_type":"code","source":["# Choose the first 12000 (out of 17000) examples for training.\n","training_examples = preprocess_features(california_housing_dataframe.head(12000))\n","training_targets = preprocess_targets(california_housing_dataframe.head(12000))\n","\n","# Choose the last 5000 (out of 17000) examples for validation.\n","validation_examples = preprocess_features(california_housing_dataframe.tail(5000))\n","validation_targets = preprocess_targets(california_housing_dataframe.tail(5000))\n","\n","# Double-check that we've done the right thing.\n","print \"Training examples summary:\"\n","display.display(training_examples.describe())\n","print \"Validation examples summary:\"\n","display.display(validation_examples.describe())\n","\n","print \"Training targets summary:\"\n","display.display(training_targets.describe())\n","print \"Validation targets summary:\"\n","display.display(validation_targets.describe())"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Training examples summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       latitude  longitude  housing_median_age  total_rooms  total_bedrooms  \\\n","count   12000.0    12000.0             12000.0      12000.0         12000.0   \n","mean       35.6     -119.6                28.6       2650.4           539.6   \n","std         2.1        2.0                12.6       2192.2           420.1   \n","min        32.5     -124.3                 1.0          2.0             1.0   \n","25%        33.9     -121.8                18.0       1469.0           296.0   \n","50%        34.2     -118.5                29.0       2128.5           434.0   \n","75%        37.7     -118.0                37.0       3152.0           650.0   \n","max        42.0     -114.3                52.0      37937.0          5471.0   \n","\n","       population  households  median_income  rooms_per_person  \n","count     12000.0     12000.0        12000.0           12000.0  \n","mean       1427.2       501.3            3.9               2.0  \n","std        1145.6       383.6            1.9               1.3  \n","min           3.0         1.0            0.5               0.0  \n","25%         790.0       281.0            2.6               1.5  \n","50%        1164.0       410.0            3.6               1.9  \n","75%        1721.2       605.0            4.8               2.3  \n","max       35682.0      5189.0           15.0              55.2  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>rooms_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>35.6</td>\n","      <td>-119.6</td>\n","      <td>28.6</td>\n","      <td>2650.4</td>\n","      <td>539.6</td>\n","      <td>1427.2</td>\n","      <td>501.3</td>\n","      <td>3.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.1</td>\n","      <td>2.0</td>\n","      <td>12.6</td>\n","      <td>2192.2</td>\n","      <td>420.1</td>\n","      <td>1145.6</td>\n","      <td>383.6</td>\n","      <td>1.9</td>\n","      <td>1.3</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.5</td>\n","      <td>-124.3</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>3.0</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.9</td>\n","      <td>-121.8</td>\n","      <td>18.0</td>\n","      <td>1469.0</td>\n","      <td>296.0</td>\n","      <td>790.0</td>\n","      <td>281.0</td>\n","      <td>2.6</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>34.2</td>\n","      <td>-118.5</td>\n","      <td>29.0</td>\n","      <td>2128.5</td>\n","      <td>434.0</td>\n","      <td>1164.0</td>\n","      <td>410.0</td>\n","      <td>3.6</td>\n","      <td>1.9</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>37.7</td>\n","      <td>-118.0</td>\n","      <td>37.0</td>\n","      <td>3152.0</td>\n","      <td>650.0</td>\n","      <td>1721.2</td>\n","      <td>605.0</td>\n","      <td>4.8</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>42.0</td>\n","      <td>-114.3</td>\n","      <td>52.0</td>\n","      <td>37937.0</td>\n","      <td>5471.0</td>\n","      <td>35682.0</td>\n","      <td>5189.0</td>\n","      <td>15.0</td>\n","      <td>55.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Validation examples summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       latitude  longitude  housing_median_age  total_rooms  total_bedrooms  \\\n","count    5000.0     5000.0              5000.0       5000.0          5000.0   \n","mean       35.6     -119.6                28.7       2627.6           539.0   \n","std         2.1        2.0                12.6       2150.4           424.9   \n","min        32.5     -124.2                 1.0         15.0             3.0   \n","25%        33.9     -121.8                18.0       1439.8           298.0   \n","50%        34.2     -118.5                29.0       2126.5           432.0   \n","75%        37.7     -118.0                37.0       3149.2           646.0   \n","max        41.8     -114.6                52.0      32627.0          6445.0   \n","\n","       population  households  median_income  rooms_per_person  \n","count      5000.0      5000.0         5000.0            5000.0  \n","mean       1435.2       501.0            3.9               2.0  \n","std        1153.5       386.8            1.9               0.9  \n","min           9.0         3.0            0.5               0.1  \n","25%         788.0       283.0            2.6               1.5  \n","50%        1173.0       406.0            3.5               1.9  \n","75%        1719.2       606.0            4.7               2.3  \n","max       28566.0      6082.0           15.0              18.3  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>rooms_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>35.6</td>\n","      <td>-119.6</td>\n","      <td>28.7</td>\n","      <td>2627.6</td>\n","      <td>539.0</td>\n","      <td>1435.2</td>\n","      <td>501.0</td>\n","      <td>3.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.1</td>\n","      <td>2.0</td>\n","      <td>12.6</td>\n","      <td>2150.4</td>\n","      <td>424.9</td>\n","      <td>1153.5</td>\n","      <td>386.8</td>\n","      <td>1.9</td>\n","      <td>0.9</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.5</td>\n","      <td>-124.2</td>\n","      <td>1.0</td>\n","      <td>15.0</td>\n","      <td>3.0</td>\n","      <td>9.0</td>\n","      <td>3.0</td>\n","      <td>0.5</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.9</td>\n","      <td>-121.8</td>\n","      <td>18.0</td>\n","      <td>1439.8</td>\n","      <td>298.0</td>\n","      <td>788.0</td>\n","      <td>283.0</td>\n","      <td>2.6</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>34.2</td>\n","      <td>-118.5</td>\n","      <td>29.0</td>\n","      <td>2126.5</td>\n","      <td>432.0</td>\n","      <td>1173.0</td>\n","      <td>406.0</td>\n","      <td>3.5</td>\n","      <td>1.9</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>37.7</td>\n","      <td>-118.0</td>\n","      <td>37.0</td>\n","      <td>3149.2</td>\n","      <td>646.0</td>\n","      <td>1719.2</td>\n","      <td>606.0</td>\n","      <td>4.7</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>41.8</td>\n","      <td>-114.6</td>\n","      <td>52.0</td>\n","      <td>32627.0</td>\n","      <td>6445.0</td>\n","      <td>28566.0</td>\n","      <td>6082.0</td>\n","      <td>15.0</td>\n","      <td>18.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Training targets summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       median_house_value\n","count             12000.0\n","mean                208.3\n","std                 116.3\n","min                  15.0\n","25%                 119.8\n","50%                 181.5\n","75%                 266.5\n","max                 500.0"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>12000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>208.3</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>116.3</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>119.8</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>181.5</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>266.5</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>500.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Validation targets summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       median_house_value\n","count              5000.0\n","mean                205.0\n","std                 115.2\n","min                  15.0\n","25%                 118.8\n","50%                 177.8\n","75%                 260.2\n","max                 500.0"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>205.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>115.2</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>118.8</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>177.8</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>260.2</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>500.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"oJlrB4rJ_2Ma","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns(input_features):\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Args:\n","    input_features: The names of the numerical input features to use.\n","  Returns:\n","    A set of feature columns\n","  \"\"\"\n","  return set([tf.feature_column.numeric_column(my_feature)\n","              for my_feature in input_features])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NBxoAfp2AcB6","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def my_input_fn(features, targets, batch_size=1, shuffle=True, num_epochs=None):\n","    \"\"\"Trains a linear regression model of one feature.\n","  \n","    Args:\n","      features: pandas DataFrame of features\n","      targets: pandas DataFrame of targets\n","      batch_size: Size of batches to be passed to the model\n","      shuffle: True or False. Whether to shuffle the data.\n","      num_epochs: Number of epochs for which data should be repeated. None = repeat indefinitely\n","    Returns:\n","      Tuple of (features, labels) for next data batch\n","    \"\"\"\n","    \n","    # Convert pandas data into a dict of np arrays.\n","    features = {key:np.array(value) for key,value in dict(features).items()}                                           \n"," \n","    # Construct a dataset, and configure batching/repeating\n","    ds = Dataset.from_tensor_slices((features,targets)) # warning: 2GB limit\n","    ds = ds.batch(batch_size).repeat(num_epochs)\n","    \n","    # Shuffle the data, if specified\n","    if shuffle:\n","      ds = ds.shuffle(10000)\n","    \n","    # Return the next batch of data\n","    features, labels = ds.make_one_shot_iterator().get_next()\n","    return features, labels"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hweDyy31LBsV","colab_type":"text"},"cell_type":"markdown","source":[" ## FTRL 최적화 알고리즘\n","\n","고차원 선형 모델에서는 경사 기반 최적화의 일종인 FTRL이 유용합니다. 이 알고리즘의 장점은 여러 가지 계수의 학습률을 서로 다르게 조정한다는 것이며, 이 방법은 일부 특성이 0이 아닌 값을 거의 취하지 않는 경우에 유용할 수 있으며 L1 정규화와도 잘 조화됩니다. [FtrlOptimizer](https://www.tensorflow.org/api_docs/python/tf/train/FtrlOptimizer)를 사용하여 FTRL을 적용할 수 있습니다."]},{"metadata":{"id":"S0SBf1X1IK_O","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def train_model(\n","    learning_rate,\n","    steps,\n","    batch_size,\n","    feature_columns,\n","    training_examples,\n","    \n","    training_targets,\n","    validation_examples,\n","    validation_targets):\n","  \"\"\"Trains a linear regression model.\n","  \n","  In addition to training, this function also prints training progress information,\n","  as well as a plot of the training and validation loss over time.\n","  \n","  Args:\n","    learning_rate: A `float`, the learning rate.\n","    steps: A non-zero `int`, the total number of training steps. A training step\n","      consists of a forward and backward pass using a single batch.\n","    feature_columns: A `set` specifying the input feature columns to use.\n","    training_examples: A `DataFrame` containing one or more columns from\n","      `california_housing_dataframe` to use as input features for training.\n","    training_targets: A `DataFrame` containing exactly one column from\n","      `california_housing_dataframe` to use as target for training.\n","    validation_examples: A `DataFrame` containing one or more columns from\n","      `california_housing_dataframe` to use as input features for validation.\n","    validation_targets: A `DataFrame` containing exactly one column from\n","      `california_housing_dataframe` to use as target for validation.\n","      \n","  Returns:\n","    A `LinearRegressor` object trained on the training data.\n","  \"\"\"\n","\n","  periods = 10\n","  steps_per_period = steps / periods\n","\n","  # Create a linear regressor object.\n","  my_optimizer = tf.train.FtrlOptimizer(learning_rate=learning_rate)\n","  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)\n","  linear_regressor = tf.estimator.LinearRegressor(\n","      feature_columns=feature_columns,\n","      optimizer=my_optimizer\n","  )\n","  \n","  training_input_fn = lambda: my_input_fn(training_examples, \n","                                          training_targets[\"median_house_value\"], \n","                                          batch_size=batch_size)\n","  predict_training_input_fn = lambda: my_input_fn(training_examples, \n","                                                  training_targets[\"median_house_value\"], \n","                                                  num_epochs=1, \n","                                                  shuffle=False)\n","  predict_validation_input_fn = lambda: my_input_fn(validation_examples, \n","                                                    validation_targets[\"median_house_value\"], \n","                                                    num_epochs=1, \n","                                                    shuffle=False)\n","\n","  # Train the model, but do so inside a loop so that we can periodically assess\n","  # loss metrics.\n","  print \"Training model...\"\n","  print \"RMSE (on training data):\"\n","  training_rmse = []\n","  validation_rmse = []\n","  for period in range (0, periods):\n","    # Train the model, starting from the prior state.\n","    linear_regressor.train(\n","        input_fn=training_input_fn,\n","        steps=steps_per_period\n","    )\n","    # Take a break and compute predictions.\n","    training_predictions = linear_regressor.predict(input_fn=predict_training_input_fn)\n","    training_predictions = np.array([item['predictions'][0] for item in training_predictions])\n","    validation_predictions = linear_regressor.predict(input_fn=predict_validation_input_fn)\n","    validation_predictions = np.array([item['predictions'][0] for item in validation_predictions])\n","    \n","    # Compute training and validation loss.\n","    training_root_mean_squared_error = math.sqrt(\n","        metrics.mean_squared_error(training_predictions, training_targets))\n","    validation_root_mean_squared_error = math.sqrt(\n","        metrics.mean_squared_error(validation_predictions, validation_targets))\n","    # Occasionally print the current loss.\n","    print \"  period %02d : %0.2f\" % (period, training_root_mean_squared_error)\n","    # Add the loss metrics from this period to our list.\n","    training_rmse.append(training_root_mean_squared_error)\n","    validation_rmse.append(validation_root_mean_squared_error)\n","  print \"Model training finished.\"\n","\n","  \n","  # Output a graph of loss metrics over periods.\n","  plt.ylabel(\"RMSE\")\n","  plt.xlabel(\"Periods\")\n","  plt.title(\"Root Mean Squared Error vs. Periods\")\n","  plt.tight_layout()\n","  plt.plot(training_rmse, label=\"training\")\n","  plt.plot(validation_rmse, label=\"validation\")\n","  plt.legend()\n","\n","  return linear_regressor"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1Cdr02tLIK_Q","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{"item_id":11},{"item_id":12}],"base_uri":"https://localhost:8080/","height":622},"outputId":"4ed83832-e033-434f-901e-9f8e5f7f9a12","executionInfo":{"status":"ok","timestamp":1521687469852,"user_tz":-540,"elapsed":135397,"user":{"displayName":"오용택","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s128","userId":"102971030941554054553"}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(training_examples),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Training model...\n","RMSE (on training data):\n","  period 00 : 243.73\n","  period 01 : 118.56\n","  period 02 : 361.08\n","  period 03 : 362.53\n","  period 04 : 326.12\n","  period 05 : 304.10\n","  period 06 : 305.39\n","  period 07 : 226.63\n","  period 08 : 186.41\n","  period 09 : 189.92\n","Model training finished.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjAAAAGACAYAAACz01iHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xd8FHX+x/HXbMumbHpPCB3pEHqH\nhJLQDgTkEERPOfRErJztZ7nz7N6pZwP17hCVu9MDlSZNBKRJL9JDTyeb3pPN7vz+CEQQCAGzmU3y\neT4eeSQ7Mzv72Z1N8t7vfL/zVVRVVRFCCCGEqEd0WhcghBBCCHGjJMAIIYQQot6RACOEEEKIekcC\njBBCCCHqHQkwQgghhKh3JMAIIYQQot4xaF2AEK7slltuISoqCr1eD4Ddbqdnz548++yzeHh43PR+\n//e//zF58uQrln/99dc8/fTTfPjhh8TExFQtLy0tpV+/fowYMYLXXnvtph+3phITE3nllVc4c+YM\nAO7u7syePZthw4Y5/bFvxNy5c0lMTLziNdmxYwczZswgMjLyivusXr26rsr7VZKTkxk6dCjNmzcH\nQFVVAgMDeeaZZ2jfvv0N7evNN98kPDyc22+/vcb3Wbp0KYsXL+bzzz+/occSoq5IgBHiOj7//HNC\nQ0MBKC8v59FHH+Wjjz7i0Ucfvan9Wa1W/vnPf141wACEhYWxYsWKywLMhg0b8Pb2vqnHuxl//OMf\nGTduHB9++CEABw4c4K677mLVqlWEhYXVWR2/RlhYWL0JK9ei1+svew4rV67kgQceYM2aNZhMphrv\nZ86cOc4oTwhNySkkIW6AyWRi4MCBHD16FICysjKef/554uLiGDlyJK+99hp2ux2AY8eOMWXKFOLj\n4xk3bhybN28GYMqUKaSmphIfH095efkVj9GtWzd27NhBSUlJ1bKVK1fSv3//qtvl5eW89NJLxMXF\nERsbWxU0APbt28eECROIj49n1KhRbNu2Daj8RD9gwAA+++wzxo4dy8CBA1m5cuVVn2dCQgJdunSp\nut2lSxfWrFlTFeTef/99Bg8ezPjx4/n444+JjY0F4KmnnmLu3LlV97v09vXqeuWVV7jjjjsA2LNn\nDxMnTmT48OFMnjyZpKQkoLIl6pFHHiEmJoY77riD9PT06xyxq/v666+ZPXs2d911F2+88QY7duxg\nypQpPPzww1X/7FetWsWYMWOIj4/nzjvvJDExEYD33nuPZ599lkmTJrFgwYLL9vvwww8zf/78qttH\njx5lwIABOBwO3n77beLi4oiLi+POO+/k/PnzN1z3qFGjKC0t5fTp0wB8+eWXxMfHExsby2OPPUZp\naSlQ+bq/+uqrjB07llWrVl12HK71vnQ4HPzlL39hyJAhTJo0iWPHjlU97s6dO7n11lsZNWoUI0eO\nZNWqVTdcuxC1ThVCXFObNm3UtLS0qtu5ubnqtGnT1Llz56qqqqofffSROnPmTNVms6klJSXqxIkT\n1SVLlqh2u10dOXKkunz5clVVVfWnn35Se/bsqRYUFKjbt29Xhw0bdtXH++qrr9Qnn3xS/eMf/1h1\n34KCAnXo0KHqokWL1CeffFJVVVV9//331bvuukstKytTi4qK1PHjx6vr169XVVVVx4wZo65YsUJV\nVVX95ptvqh4rKSlJbd++vfr555+rqqqqK1euVIcPH37VOh588EE1JiZG/fTTT9WTJ09etu748eNq\njx491IyMDNVms6n333+/GhMTo6qqqj755JPqBx98ULXtpberq6tDhw7q119/XfV8e/bsqW7ZskVV\nVVVdvny5euutt6qqqqoLFy5Up02bptpsNjU7O1uNiYmpek0uVd1rfPF17tq1q3rmzJmq7Tt16qRu\n27ZNVVVVTUlJUbt3766ePXtWVVVV/de//qXeddddqqqq6rvvvqsOGDBAzcrKumK/3377rTpt2rSq\n2++884764osvqgkJCeqIESPU8vJyVVVV9bPPPlO/+eaba9Z38XVp167dFct79uypnjp1St21a5fa\nt29fNT09XVVVVX3uuefU1157TVXVytd97NixamlpadXtDz74oNr35caNG9URI0aohYWFaklJiTpp\n0iT1jjvuUFVVVSdMmKDu2LFDVVVVPXPmjPrYY49VW7sQdUFaYIS4junTpxMfH8/QoUMZOnQoffr0\nYebMmQBs3LiRyZMnYzAYMJvNjB07lq1bt5KcnExmZiajR48GoFOnToSHh3Pw4MEaPebo0aNZsWIF\nAOvWrSMmJgad7udf1w0bNjB16lRMJhMeHh6MGzeOtWvXArBkyRJGjhwJQPfu3ataLwAqKiqYMGEC\nAB06dCA1NfWqj//Xv/6VadOmsXz5csaMGUNsbCz//e9/gcrWkZ49exIUFITBYGDMmDE1ek7V1WWz\n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\nEYkvFZghxmV3Ms47CZu7i2hGHcSgMENDSCIiMrSowAxBV44fmI1kOPtIi2bitDtNTiQiIhJfKjBD\n0My8KdhiA6Ul26kFHEVEZOhRgRmCnHYnU7KmADB5hG5gJyIiQ48KzBD1hUlXMNKbx6Xj5pgdRURE\nJO50H5ghqiijkB995gdmxxAREUkInYERERERy1GBEREREctRgRERERHLUYERERERy1GBEREREctR\ngRERERHLUYERERERy1GBEREREctRgRERERHLUYERERERy1GBEREREctRgRERERHLUYERERERyzFi\nsVjM7BAiIiIi50JnYERERMRyVGBERETEclRgRERExHJUYERERMRyVGBERETEclRgRERExHJUYD7k\n/vvvZ8mSJSxdupSdO3eaHUc+ZNWqVSxZsoTFixezceNGs+PIh3R3d7No0SJ+//vfmx1FPuTFF1/k\nS1/6EjfccAObN282O44AnZ2dfPvb36asrIylS5eyZcsWsyNZmsPsAKni7bff5tixY6xbt45Dhw5x\n9913s27dOrNjCfDWW29x4MAB1q1bR2trK1/5yle45pprzI4lJz3yyCNkZmaaHUM+pLW1ldWrV/PC\nCy8QDof55S9/yRVXXGF2rGHvD3/4A+PHj2fFihU0NjbyjW98g5dfftnsWJalAnPS1q1bWbRoEQAT\nJkygra2Njo4OfD6fyclk/vz5zJo1C4CMjAy6urro7+/HbrebnEwOHTrEwYMH9c0xxWzdupUFCxbg\n8/nw+Xz89Kc/NTuSANnZ2ezfvx+A9vZ2srOzTU5kbRpCOqm5ufm0L6acnByamppMTCQfsNvteL1e\nANavX89ll12m8pIiVq5cyV133WV2DPknNTU1dHd3c9ttt7Fs2TK2bt1qdiQB/uVf/oW6ujquvvpq\nbr75Zv7zP//T7EiWpjMwn0ArLKSeTZs2sX79ep588kmzowjwxz/+kdmzZ1NYWGh2FPkYJ06c4OGH\nH6auro6vf/3rvPbaaxiGYXasYe1Pf/oTBQUF/PrXv2bfvn3cfffdunZsEFRgTgoEAjQ3N5/6czAY\nJC8vz8RE8mFbtmzh0Ucf5YknnsDv95sdR4DNmzdTXV3N5s2baWhowOVykZ+fz8UXX2x2tGEvNzeX\nOXPm4HA4GDt2LOnp6Rw/fpzc3Fyzow1r5eXlLFy4EIApU6YQDAY1HD4IGkI66ZJLLmHDhg0AVFZW\nEggEdP1LigiFQqxatYpf/epXZGVlmR1HTvr5z3/OCy+8wHPPPcdNN93E7bffrvKSIhYuXMhbb71F\nNBqltbWVcDis6y1SQFFRERUVFQDU1taSnp6u8jIIOgNzUmlpKdOnT2fp0qUYhsF9991ndiQ56aWX\nXqK1tZXly5efJmPX+QAAA1BJREFUemzlypUUFBSYmEokdY0cOZJrr72Wr371qwDcc8892Gz6edVs\nS5Ys4e677+bmm28mEonw4x//2OxIlmbEdLGHiIiIWIwquYiIiFiOCoyIiIhYjgqMiIiIWI4KjIiI\niFiOCoyIiIhYjgqMiCRUTU0NM2bMoKys7NQqvCtWrKC9vf2st1FWVkZ/f/9ZP/9f//Vf2bZt2/nE\nFRGLUIERkYTLyclhzZo1rFmzhmeffZZAIMAjjzxy1q9fs2aNbvglIqfRjexEJOnmz5/PunXr2Ldv\nHytXriQSidDX18ePfvQjpk2bRllZGVOmTGHv3r089dRTTJs2jcrKSnp7e7n33ntpaGggEolw/fXX\ns2zZMrq6uvje975Ha2srRUVF9PT0ANDY2Mj3v/99ALq7u1myZAk33nijmW9dROJEBUZEkqq/v59X\nXnmFuXPn8oMf/IDVq1czduzYjyxu5/V6Wbt27WmvXbNmDRkZGfzsZz+ju7ubz3/+81x66aW8+eab\nuN1u1q1bRzAY5KqrrgLgr3/9K8XFxfzkJz+hp6eH559/PunvV0QSQwVGRBLu+PHjlJWVARCNRpk3\nbx6LFy/moYce4oc//OGp53V0dBCNRoGB5T3+WUVFBTfccAMAbrebGTNmUFlZSVVVFXPnzgUGFmYt\nLi4G4NJLL+WZZ57hrrvu4vLLL2fJkiUJfZ8ikjwqMCKScB9cA/NhoVAIp9P5kcc/4HQ6P/KYYRin\n/TkWi2EYBrFY7LS1fj4oQRMmTOAvf/kL77zzDi+//DJPPfUUzz777GDfjoikAF3EKyKm8Pv9jBkz\nhtdffx2AI0eO8PDDD5/xNSUlJWzZsgWAcDhMZWUl06dPZ8KECbz77rsA1NfXc+TIEQD+/Oc/s2vX\nLi6++GLuu+8+6uvriUQiCXxXIpIsOgMjIqZZuXIl//Vf/8Vjjz1GJBLhrrvuOuPzy8rKuPfee/na\n175Gb28vt99+O2PGjOH666/n1VdfZdmyZYwZM4aZM2cCMHHiRO677z5cLhexWIxbb70Vh0P/7YkM\nBVqNWkRERCxHQ0giIiJiOSowIiIiYjkqMCIiImI5KjAiIiJiOSowIiIiYjkqMCIiImI5KjAiIiJi\nOSowIiIiYjn/D0ewD2i9L9f1AAAAAElFTkSuQmCC\n","text/plain":["<matplotlib.figure.Figure at 0x7fd1f4b80e50>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"i4lGvqajDWlw","colab_type":"text"},"cell_type":"markdown","source":[" ## 불연속 특성에 대한 원-핫 인코딩\n","\n","문자열, 열거형, 정수 등의 불연속 특성은 일반적으로 로지스틱 회귀 모델을 학습하기 전에 이진 특성 패밀리로 변환됩니다.\n","\n","예를 들어 값으로 `0`, `1`, `2`만 취할 수 있는 합성 특성을 만들었으며 몇 개의 학습 포인트가 있다고 가정해 보겠습니다.\n","\n","| # | feature_value |\n","|---|---------------|\n","| 0 |             2 |\n","| 1 |             0 |\n","| 2 |             1 |\n","\n","가능한 각 범주 값에 대해 **실수값**으로 새 **이진** 특성을 만듭니다. 이 특성은 2가지 값만 취할 수 있는데, 예에 해당 값이 포함되었으면 1.0이고 그렇지 않으면 0.0입니다. 위 예제에서는 범주형 특성을 3개의 특성으로 변환하므로 이제 학습 포인트는 다음과 같습니다.\n","\n","| # | feature_value_0 | feature_value_1 | feature_value_2 |\n","|---|-----------------|-----------------|-----------------|\n","| 0 |             0.0 |             0.0 |             1.0 |\n","| 1 |             1.0 |             0.0 |             0.0 |\n","| 2 |             0.0 |             1.0 |             0.0 |"]},{"metadata":{"id":"KnssXowblKm7","colab_type":"text"},"cell_type":"markdown","source":[" ## 버킷화(비닝) 특성\n","\n","버킷화를 비닝이라고도 합니다.\n","\n","예를 들어 `population`을 다음과 같이 3가지로 버킷화할 수 있습니다.\n","- `bucket_0` (`< 5000`): 인구가 적은 지역에 해당\n","- `bucket_1` (`5000 - 25000`): 인구가 중간 정도인 지역에 해당\n","- `bucket_2` (`> 25000`): 인구가 많은 지역에 해당\n","\n","이러한 버킷 정의로 다음과 같은 `population` 벡터를 변환할 수 있습니다.\n","\n","    [[10001], [42004], [2500], [18000]]\n","\n","버킷화 특성 벡터는 다음과 같습니다.\n","\n","    [[1], [2], [0], [1]]\n","\n","특성 값은 이제 버킷 색인입니다. 이러한 색인은 불연속 특성으로 간주됩니다. 이러한 특성은 위와 같이 원-핫 표현으로 변환되는 것이 일반적이지만 이 과정은 투명하게 이루어집니다.\n","\n","버킷화 특성에 대한 특성 열을 정의하려면 `numeric_column`을 사용하는 대신 [`bucketized_column`](https://www.tensorflow.org/api_docs/python/tf/feature_column/bucketized_column)을 사용합니다. 이 특성 열은 입력으로 취한 숫자 열을 `boundardies` 인수에 지정된 버킷 경계를 사용하여 버킷화 특성으로 변환합니다. 다음 코드에서는 `households` 및 `longitude`에 대한 버킷화 특성 열을 정의합니다. `get_quantile_based_boundaries` 함수는 분위를 기준으로 경계를 계산하므로 각 버킷은 동일한 수의 요소를 포함합니다."]},{"metadata":{"id":"cc9qZrtRy-ED","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def get_quantile_based_boundaries(feature_values, num_buckets):\n","  boundaries = np.arange(1.0, num_buckets) / num_buckets\n","  quantiles = feature_values.quantile(boundaries)\n","  return [quantiles[q] for q in quantiles.keys()]\n","\n","# Divide households into 7 buckets.\n","households = tf.feature_column.numeric_column(\"households\")\n","bucketized_households = tf.feature_column.bucketized_column(\n","  households, boundaries=get_quantile_based_boundaries(\n","    california_housing_dataframe[\"households\"], 7))\n","\n","# Divide longitude into 10 buckets.\n","longitude = tf.feature_column.numeric_column(\"longitude\")\n","bucketized_longitude = tf.feature_column.bucketized_column(\n","  longitude, boundaries=get_quantile_based_boundaries(\n","    california_housing_dataframe[\"longitude\"], 10))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"U-pQDAa0MeN3","colab_type":"text"},"cell_type":"markdown","source":[" ## 작업 1: 버킷화 특성 열로 모델 학습\n","**예의 모든 실수값 확률을 버킷화하고 모델을 학습시킨 후 결과가 개선되는지 확인합니다.**\n","\n","이전 코드 블록에서는 두 개의 실수값 열(`households` 및 `longitude`)을 버킷화 특성 열로 변환했습니다. 이번에 수행할 작업은 나머지 열을 버킷화한 후 코드를 실행하여 모델을 학습시키는 것입니다. 다양한 휴리스틱으로 버킷의 범위를 정할 수 있습니다. 이 실습에서는 분위 기반 방식을 사용하여 각 버킷에 동일한 수의 예가 포함되도록 버킷 경계를 선택합니다."]},{"metadata":{"id":"YFXV9lyMLedy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","\n","  #\n","  # YOUR CODE HERE: bucketize the following columns, following the example above:\n","  #\n","  bucketized_latitude = \n","  bucketized_housing_median_age = \n","  bucketized_median_income =\n","  bucketized_rooms_per_person =\n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person])\n","  \n","  return feature_columns\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"0FfUytOTNJhL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ZTDHHM61NPTw","colab_type":"text"},"cell_type":"markdown","source":[" ### 해결 방법\n","\n","해결 방법을 보려면 아래를 클릭하세요."]},{"metadata":{"id":"JQHnUhL_NRwA","colab_type":"text"},"cell_type":"markdown","source":[" 사용할 버킷 수를 어떠한 기준으로 결정하는지 궁금할 수 있습니다. 물론 데이터 자체와는 무관합니다. 여기에서는 모델이 너무 커지지 않는 선에서 임의로 값을 선택했습니다."]},{"metadata":{"id":"Ro5civQ3Ngh_","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"RNgfYk6OO8Sy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AFJ1qoZPlQcs","colab_type":"text"},"cell_type":"markdown","source":[" ## 특성 교차\n","\n","둘 이상의 특성을 교차하는 것은 선형 모델을 사용하여 비선형 관계를 학습하는 효과적인 방법입니다. 이 문제에서 `latitude` 특성만 학습에 사용하면 모델은 특정 위도에 있는 지역, 버킷화를 거쳤으므로 정확히는 특성 위도 범위에 포함된 지역이 다른 지역보다 집값이 비쌀 가능성이 높다는 사실을 학습할 수 있습니다. 그러나 `longitude`와 `latitude`를 교차하면 이 교차 특성은 잘 정의된 지역을 나타냅니다. 모델에서 위도 및 경도 범위에 포함된 특정 지역이 다른 지역보다 집값이 비쌀 가능성이 높다는 사실을 학습하면 두 특성을 개별적으로 고려할 때보다 강한 신호가 됩니다.\n","\n","현재 특성 열 API는 불연속 특성에 대해서만 교차를 지원합니다. `latitude` 또는 `longitude` 등의 두 연속 특성을 교차하려면 버킷화를 거쳐야 합니다.\n","\n","`latitude` 특성과 `longitude` 특성을 교차할 때 longitude`를 `2`개 버킷으로, `latitude`를 `3`개 버킷으로 만들었다면 실제로 6개의 교차 이진 특성을 얻게 됩니다. 모델을 학습시킬 때 이러한 각 특성에 별도의 가중치가 부여됩니다."]},{"metadata":{"id":"-Rk0c1oTYaVH","colab_type":"text"},"cell_type":"markdown","source":[" ## 작업 2: 특성 교차를 사용하여 모델 학습\n","\n","**모델에 `longitude`와 `latitude`의 특성 교차를 추가하고 학습시켜 결과가 개선되는지 여부를 판단합니다.**\n","\n","TensorFlow API 문서에서 [`crossed_column()`](https://www.tensorflow.org/api_docs/python/tf/feature_column/crossed_column)을 참조하여 교차 특성 열을 작성하세요. `hash_bucket_size`는 `1000`으로 지정합니다."]},{"metadata":{"id":"-eYiVEGeYhUi","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}},"cellView":"both"},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross\n","  long_x_lat = \n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person,\n","    long_x_lat])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xZuZMp3EShkM","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"0i7vGo9PTaZl","colab_type":"text"},"cell_type":"markdown","source":[" ### 해결 방법\n","\n","해결 방법을 보려면 아래를 클릭하세요."]},{"metadata":{"id":"3tAWu8qSTe2v","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross\n","  long_x_lat = tf.feature_column.crossed_column(\n","  set([bucketized_longitude, bucketized_latitude]), hash_bucket_size=1000) \n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person,\n","    long_x_lat])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-_vvNYIyTtPC","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ymlHJ-vrhLZw","colab_type":"text"},"cell_type":"markdown","source":[" ## 선택 과제: 더 많은 합성 특성 실험\n","\n","지금까지는 단순한 버킷화 열 및 특성 교차를 시험했지만, 이외에도 수많은 조합을 통해 결과를 개선할 수 있습니다. 예를 들어 여러 열을 교차할 수 있습니다. 버킷 수에 변화를 주면 어떻게 될까요? 다른 합성 특성을 생각해 볼 수 있을까요? 모델을 개선하는 효과가 있나요?"]}]}