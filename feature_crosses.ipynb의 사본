{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"feature_crosses.ipynb의 사본","version":"0.3.2","views":{},"default_view":{},"provenance":[{"file_id":"/v2/external/notebooks/mlcc/feature_crosses.ipynb","timestamp":1521691383418}],"collapsed_sections":["ZTDHHM61NPTw","0i7vGo9PTaZl","copyright-notice"]}},"cells":[{"metadata":{"id":"copyright-notice","colab_type":"text"},"cell_type":"markdown","source":["#### Copyright 2017 Google LLC."]},{"metadata":{"id":"copyright-notice2","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}},"cellView":"both"},"cell_type":"code","source":["# Licensed under the Apache License, Version 2.0 (the \"License\");\n","# you may not use this file except in compliance with the License.\n","# You may obtain a copy of the License at\n","#\n","# https://www.apache.org/licenses/LICENSE-2.0\n","#\n","# Unless required by applicable law or agreed to in writing, software\n","# distributed under the License is distributed on an \"AS IS\" BASIS,\n","# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","# See the License for the specific language governing permissions and\n","# limitations under the License."],"execution_count":0,"outputs":[]},{"metadata":{"id":"g4T-_IsVbweU","colab_type":"text"},"cell_type":"markdown","source":[" # 특성 교차"]},{"metadata":{"id":"F7dke6skIK-k","colab_type":"text"},"cell_type":"markdown","source":[" **학습 목표:**\n","  * 합성 특성을 추가하여 선형 회귀 모델을 개선한다(이전 실습에서 계속 진행)\n","  * 입력 함수를 사용하여 `DataFrame` 개체를 `Tensors`로 변환하고 `fit()` 및 `predict()` 작업에서 입력 함수를 호출한다\n","  * 모델 학습에 FTRL 최적화 알고리즘을 사용한다\n","  * 원-핫 인코딩, 비닝, 특성 교차를 통해 새 합성 특성을 만든다"]},{"metadata":{"id":"NS_fcQRd8B97","colab_type":"text"},"cell_type":"markdown","source":[" ## 설정"]},{"metadata":{"id":"4IdzD8IdIK-l","colab_type":"text"},"cell_type":"markdown","source":[" 우선 이전 실습과 마찬가지로 입력을 정의하고 데이터 로딩 코드를 만들겠습니다."]},{"metadata":{"id":"CsfdiLiDIK-n","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["import math\n","\n","from IPython import display\n","from matplotlib import cm\n","from matplotlib import gridspec\n","from matplotlib import pyplot as plt\n","import numpy as np\n","import pandas as pd\n","from sklearn import metrics\n","import tensorflow as tf\n","from tensorflow.python.data import Dataset\n","\n","tf.logging.set_verbosity(tf.logging.ERROR)\n","pd.options.display.max_rows = 10\n","pd.options.display.float_format = '{:.1f}'.format\n","\n","california_housing_dataframe = pd.read_csv(\"https://storage.googleapis.com/mledu-datasets/california_housing_train.csv\", sep=\",\")\n","\n","california_housing_dataframe = california_housing_dataframe.reindex(\n","    np.random.permutation(california_housing_dataframe.index))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"10rhoflKIK-s","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def preprocess_features(california_housing_dataframe):\n","  \"\"\"Prepares input features from California housing data set.\n","\n","  Args:\n","    california_housing_dataframe: A Pandas DataFrame expected to contain data\n","      from the California housing data set.\n","  Returns:\n","    A DataFrame that contains the features to be used for the model, including\n","    synthetic features.\n","  \"\"\"\n","  selected_features = california_housing_dataframe[\n","    [\"latitude\",\n","     \"longitude\",\n","     \"housing_median_age\",\n","     \"total_rooms\",\n","     \"total_bedrooms\",\n","     \"population\",\n","     \"households\",\n","     \"median_income\"]]\n","  processed_features = selected_features.copy()\n","  # Create a synthetic feature.\n","  processed_features[\"rooms_per_person\"] = (\n","    california_housing_dataframe[\"total_rooms\"] /\n","    california_housing_dataframe[\"population\"])\n","  return processed_features\n","\n","def preprocess_targets(california_housing_dataframe):\n","  \"\"\"Prepares target features (i.e., labels) from California housing data set.\n","\n","  Args:\n","    california_housing_dataframe: A Pandas DataFrame expected to contain data\n","      from the California housing data set.\n","  Returns:\n","    A DataFrame that contains the target feature.\n","  \"\"\"\n","  output_targets = pd.DataFrame()\n","  # Scale the target to be in units of thousands of dollars.\n","  output_targets[\"median_house_value\"] = (\n","    california_housing_dataframe[\"median_house_value\"] / 1000.0)\n","  return output_targets"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ufplEkjN8KUp","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{},{},{},{},{},{},{},{}],"base_uri":"https://localhost:8080/","height":1205},"outputId":"d2857af0-86bb-44a8-83e1-aadb1ce29830","executionInfo":{"status":"ok","timestamp":1521687733714,"user_tz":-540,"elapsed":661,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["# Choose the first 12000 (out of 17000) examples for training.\n","training_examples = preprocess_features(california_housing_dataframe.head(12000))\n","training_targets = preprocess_targets(california_housing_dataframe.head(12000))\n","\n","# Choose the last 5000 (out of 17000) examples for validation.\n","validation_examples = preprocess_features(california_housing_dataframe.tail(5000))\n","validation_targets = preprocess_targets(california_housing_dataframe.tail(5000))\n","\n","# Double-check that we've done the right thing.\n","print \"Training examples summary:\"\n","display.display(training_examples.describe())\n","print \"Validation examples summary:\"\n","display.display(validation_examples.describe())\n","\n","print \"Training targets summary:\"\n","display.display(training_targets.describe())\n","print \"Validation targets summary:\"\n","display.display(validation_targets.describe())"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training examples summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       latitude  longitude  housing_median_age  total_rooms  total_bedrooms  \\\n","count   12000.0    12000.0             12000.0      12000.0         12000.0   \n","mean       35.6     -119.6                28.6       2664.8           543.5   \n","std         2.1        2.0                12.6       2189.2           426.8   \n","min        32.5     -124.3                 1.0          2.0             2.0   \n","25%        33.9     -121.8                18.0       1469.8           299.0   \n","50%        34.3     -118.5                29.0       2142.0           435.0   \n","75%        37.7     -118.0                37.0       3172.0           651.2   \n","max        42.0     -114.5                52.0      32627.0          6445.0   \n","\n","       population  households  median_income  rooms_per_person  \n","count     12000.0     12000.0        12000.0           12000.0  \n","mean       1437.1       505.4            3.9               2.0  \n","std        1134.1       390.6            1.9               1.1  \n","min           3.0         2.0            0.5               0.1  \n","25%         793.0       284.0            2.6               1.5  \n","50%        1171.0       410.0            3.5               1.9  \n","75%        1729.0       608.0            4.8               2.3  \n","max       28566.0      6082.0           15.0              52.0  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>rooms_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","      <td>12000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>35.6</td>\n","      <td>-119.6</td>\n","      <td>28.6</td>\n","      <td>2664.8</td>\n","      <td>543.5</td>\n","      <td>1437.1</td>\n","      <td>505.4</td>\n","      <td>3.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.1</td>\n","      <td>2.0</td>\n","      <td>12.6</td>\n","      <td>2189.2</td>\n","      <td>426.8</td>\n","      <td>1134.1</td>\n","      <td>390.6</td>\n","      <td>1.9</td>\n","      <td>1.1</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.5</td>\n","      <td>-124.3</td>\n","      <td>1.0</td>\n","      <td>2.0</td>\n","      <td>2.0</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>0.5</td>\n","      <td>0.1</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.9</td>\n","      <td>-121.8</td>\n","      <td>18.0</td>\n","      <td>1469.8</td>\n","      <td>299.0</td>\n","      <td>793.0</td>\n","      <td>284.0</td>\n","      <td>2.6</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>34.3</td>\n","      <td>-118.5</td>\n","      <td>29.0</td>\n","      <td>2142.0</td>\n","      <td>435.0</td>\n","      <td>1171.0</td>\n","      <td>410.0</td>\n","      <td>3.5</td>\n","      <td>1.9</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>37.7</td>\n","      <td>-118.0</td>\n","      <td>37.0</td>\n","      <td>3172.0</td>\n","      <td>651.2</td>\n","      <td>1729.0</td>\n","      <td>608.0</td>\n","      <td>4.8</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>42.0</td>\n","      <td>-114.5</td>\n","      <td>52.0</td>\n","      <td>32627.0</td>\n","      <td>6445.0</td>\n","      <td>28566.0</td>\n","      <td>6082.0</td>\n","      <td>15.0</td>\n","      <td>52.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Validation examples summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       latitude  longitude  housing_median_age  total_rooms  total_bedrooms  \\\n","count    5000.0     5000.0              5000.0       5000.0          5000.0   \n","mean       35.6     -119.5                28.7       2592.8           529.7   \n","std         2.1        2.0                12.6       2156.9           408.4   \n","min        32.5     -124.3                 1.0          8.0             1.0   \n","25%        33.9     -121.8                18.0       1445.8           292.0   \n","50%        34.2     -118.5                29.0       2099.5           430.0   \n","75%        37.7     -118.0                37.0       3100.8           641.0   \n","max        42.0     -114.3                52.0      37937.0          5471.0   \n","\n","       population  households  median_income  rooms_per_person  \n","count      5000.0      5000.0         5000.0            5000.0  \n","mean       1411.6       491.3            3.9               2.0  \n","std        1180.0       369.3            1.9               1.4  \n","min          13.0         1.0            0.5               0.0  \n","25%         781.0       275.0            2.6               1.5  \n","50%        1155.0       405.0            3.5               1.9  \n","75%        1704.0       596.0            4.7               2.3  \n","max       35682.0      5189.0           15.0              55.2  "],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>housing_median_age</th>\n","      <th>total_rooms</th>\n","      <th>total_bedrooms</th>\n","      <th>population</th>\n","      <th>households</th>\n","      <th>median_income</th>\n","      <th>rooms_per_person</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","      <td>5000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>35.6</td>\n","      <td>-119.5</td>\n","      <td>28.7</td>\n","      <td>2592.8</td>\n","      <td>529.7</td>\n","      <td>1411.6</td>\n","      <td>491.3</td>\n","      <td>3.9</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>2.1</td>\n","      <td>2.0</td>\n","      <td>12.6</td>\n","      <td>2156.9</td>\n","      <td>408.4</td>\n","      <td>1180.0</td>\n","      <td>369.3</td>\n","      <td>1.9</td>\n","      <td>1.4</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>32.5</td>\n","      <td>-124.3</td>\n","      <td>1.0</td>\n","      <td>8.0</td>\n","      <td>1.0</td>\n","      <td>13.0</td>\n","      <td>1.0</td>\n","      <td>0.5</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>33.9</td>\n","      <td>-121.8</td>\n","      <td>18.0</td>\n","      <td>1445.8</td>\n","      <td>292.0</td>\n","      <td>781.0</td>\n","      <td>275.0</td>\n","      <td>2.6</td>\n","      <td>1.5</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>34.2</td>\n","      <td>-118.5</td>\n","      <td>29.0</td>\n","      <td>2099.5</td>\n","      <td>430.0</td>\n","      <td>1155.0</td>\n","      <td>405.0</td>\n","      <td>3.5</td>\n","      <td>1.9</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>37.7</td>\n","      <td>-118.0</td>\n","      <td>37.0</td>\n","      <td>3100.8</td>\n","      <td>641.0</td>\n","      <td>1704.0</td>\n","      <td>596.0</td>\n","      <td>4.7</td>\n","      <td>2.3</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>42.0</td>\n","      <td>-114.3</td>\n","      <td>52.0</td>\n","      <td>37937.0</td>\n","      <td>5471.0</td>\n","      <td>35682.0</td>\n","      <td>5189.0</td>\n","      <td>15.0</td>\n","      <td>55.2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Training targets summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       median_house_value\n","count             12000.0\n","mean                207.9\n","std                 116.8\n","min                  15.0\n","25%                 120.0\n","50%                 180.6\n","75%                 265.4\n","max                 500.0"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>12000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>207.9</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>116.8</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>120.0</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>180.6</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>265.4</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>500.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["Validation targets summary:\n"],"name":"stdout"},{"output_type":"display_data","data":{"text/plain":["       median_house_value\n","count              5000.0\n","mean                205.8\n","std                 113.9\n","min                  15.0\n","25%                 118.8\n","50%                 179.6\n","75%                 264.1\n","max                 500.0"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>median_house_value</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>5000.0</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>205.8</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>113.9</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>15.0</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>118.8</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>179.6</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>264.1</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>500.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"oJlrB4rJ_2Ma","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns(input_features):\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Args:\n","    input_features: The names of the numerical input features to use.\n","  Returns:\n","    A set of feature columns\n","  \"\"\"\n","  return set([tf.feature_column.numeric_column(my_feature)\n","              for my_feature in input_features])"],"execution_count":0,"outputs":[]},{"metadata":{"id":"NBxoAfp2AcB6","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def my_input_fn(features, targets, batch_size=1, shuffle=True, num_epochs=None):\n","    \"\"\"Trains a linear regression model of one feature.\n","  \n","    Args:\n","      features: pandas DataFrame of features\n","      targets: pandas DataFrame of targets\n","      batch_size: Size of batches to be passed to the model\n","      shuffle: True or False. Whether to shuffle the data.\n","      num_epochs: Number of epochs for which data should be repeated. None = repeat indefinitely\n","    Returns:\n","      Tuple of (features, labels) for next data batch\n","    \"\"\"\n","    \n","    # Convert pandas data into a dict of np arrays.\n","    features = {key:np.array(value) for key,value in dict(features).items()}                                           \n"," \n","    # Construct a dataset, and configure batching/repeating\n","    ds = Dataset.from_tensor_slices((features,targets)) # warning: 2GB limit\n","    ds = ds.batch(batch_size).repeat(num_epochs)\n","    \n","    # Shuffle the data, if specified\n","    if shuffle:\n","      ds = ds.shuffle(10000)\n","    \n","    # Return the next batch of data\n","    features, labels = ds.make_one_shot_iterator().get_next()\n","    return features, labels"],"execution_count":0,"outputs":[]},{"metadata":{"id":"hweDyy31LBsV","colab_type":"text"},"cell_type":"markdown","source":[" ## FTRL 최적화 알고리즘\n","\n","고차원 선형 모델에서는 경사 기반 최적화의 일종인 FTRL이 유용합니다. 이 알고리즘의 장점은 여러 가지 계수의 학습률을 서로 다르게 조정한다는 것이며, 이 방법은 일부 특성이 0이 아닌 값을 거의 취하지 않는 경우에 유용할 수 있으며 L1 정규화와도 잘 조화됩니다. [FtrlOptimizer](https://www.tensorflow.org/api_docs/python/tf/train/FtrlOptimizer)를 사용하여 FTRL을 적용할 수 있습니다."]},{"metadata":{"id":"S0SBf1X1IK_O","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def train_model(\n","    learning_rate,\n","    steps,\n","    batch_size,\n","    feature_columns,\n","    training_examples,\n","    training_targets,\n","    validation_examples,\n","    validation_targets):\n","  \"\"\"Trains a linear regression model.\n","  \n","  In addition to training, this function also prints training progress information,\n","  as well as a plot of the training and validation loss over time.\n","  \n","  Args:\n","    learning_rate: A `float`, the learning rate.\n","    steps: A non-zero `int`, the total number of training steps. A training step\n","      consists of a forward and backward pass using a single batch.\n","    feature_columns: A `set` specifying the input feature columns to use.\n","    training_examples: A `DataFrame` containing one or more columns from\n","      `california_housing_dataframe` to use as input features for training.\n","    training_targets: A `DataFrame` containing exactly one column from\n","      `california_housing_dataframe` to use as target for training.\n","    validation_examples: A `DataFrame` containing one or more columns from\n","      `california_housing_dataframe` to use as input features for validation.\n","    validation_targets: A `DataFrame` containing exactly one column from\n","      `california_housing_dataframe` to use as target for validation.\n","      \n","  Returns:\n","    A `LinearRegressor` object trained on the training data.\n","  \"\"\"\n","\n","  periods = 10\n","  steps_per_period = steps / periods\n","\n","  # Create a linear regressor object.\n","  my_optimizer = tf.train.FtrlOptimizer(learning_rate=learning_rate)\n","  my_optimizer = tf.contrib.estimator.clip_gradients_by_norm(my_optimizer, 5.0)\n","  linear_regressor = tf.estimator.LinearRegressor(\n","      feature_columns=feature_columns,\n","      optimizer=my_optimizer\n","  )\n","  \n","  training_input_fn = lambda: my_input_fn(training_examples, \n","                                          training_targets[\"median_house_value\"], \n","                                          batch_size=batch_size)\n","  predict_training_input_fn = lambda: my_input_fn(training_examples, \n","                                                  training_targets[\"median_house_value\"], \n","                                                  num_epochs=1, \n","                                                  shuffle=False)\n","  predict_validation_input_fn = lambda: my_input_fn(validation_examples, \n","                                                    validation_targets[\"median_house_value\"], \n","                                                    num_epochs=1, \n","                                                    shuffle=False)\n","\n","  # Train the model, but do so inside a loop so that we can periodically assess\n","  # loss metrics.\n","  print \"Training model...\"\n","  print \"RMSE (on training data):\"\n","  training_rmse = []\n","  validation_rmse = []\n","  for period in range (0, periods):\n","    # Train the model, starting from the prior state.\n","    linear_regressor.train(\n","        input_fn=training_input_fn,\n","        steps=steps_per_period\n","    )\n","    # Take a break and compute predictions.\n","    training_predictions = linear_regressor.predict(input_fn=predict_training_input_fn)\n","    training_predictions = np.array([item['predictions'][0] for item in training_predictions])\n","    validation_predictions = linear_regressor.predict(input_fn=predict_validation_input_fn)\n","    validation_predictions = np.array([item['predictions'][0] for item in validation_predictions])\n","    \n","    # Compute training and validation loss.\n","    training_root_mean_squared_error = math.sqrt(\n","        metrics.mean_squared_error(training_predictions, training_targets))\n","    validation_root_mean_squared_error = math.sqrt(\n","        metrics.mean_squared_error(validation_predictions, validation_targets))\n","    # Occasionally print the current loss.\n","    print \"  period %02d : %0.2f\" % (period, training_root_mean_squared_error)\n","    # Add the loss metrics from this period to our list.\n","    training_rmse.append(training_root_mean_squared_error)\n","    validation_rmse.append(validation_root_mean_squared_error)\n","  print \"Model training finished.\"\n","\n","  \n","  # Output a graph of loss metrics over periods.\n","  plt.ylabel(\"RMSE\")\n","  plt.xlabel(\"Periods\")\n","  plt.title(\"Root Mean Squared Error vs. Periods\")\n","  plt.tight_layout()\n","  plt.plot(training_rmse, label=\"training\")\n","  plt.plot(validation_rmse, label=\"validation\")\n","  plt.legend()\n","\n","  return linear_regressor"],"execution_count":0,"outputs":[]},{"metadata":{"id":"1Cdr02tLIK_Q","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{},{}],"base_uri":"https://localhost:8080/","height":622},"outputId":"3eb4cf04-4222-4f62-c4b8-339b8b24c8a6","executionInfo":{"status":"ok","timestamp":1521687878505,"user_tz":-540,"elapsed":115066,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(training_examples),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training model...\n","RMSE (on training data):\n","  period 00 : 231.58\n","  period 01 : 389.65\n","  period 02 : 200.54\n","  period 03 : 129.74\n","  period 04 : 129.74\n","  period 05 : 138.78\n","  period 06 : 149.61\n","  period 07 : 127.46\n","  period 08 : 133.80\n","  period 09 : 122.43\n","Model training finished.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjAAAAGACAYAAACz01iHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3Xl8lOW5//HPzCSTyb4HCGFLSGSL\nLEorIMoiEBZ/oiK1WOpRanvqUheOS1v1nFbrerTHBbf2uFRPT6lUrdYFRaSKCxbhhEW2hCUhJGSf\nSTLZZub5/THJlCUJWyYzk3zfr5cvmeV5nmtyh9dcPPd1X7fJMAwDERERkRBiDnQAIiIiIqdKCYyI\niIiEHCUwIiIiEnKUwIiIiEjIUQIjIiIiIUcJjIiIiIScsEAHIBLMzjrrLAYPHozFYgHA7XYzceJE\n7r77bqKiok77vH/+859ZvHjxcc+/8cYb/PznP+e5555j+vTpvuebmpqYPHkys2fP5qGHHjrt656s\noqIiHnjgAfbt2wdAZGQkN954IxdddJHfr30qnnnmGYqKio77mWzYsIFly5aRkZFx3DEffPBBT4V3\nRg4ePMjMmTMZNmwYAIZhkJKSwi9/+UtGjRp1Sud67LHHSE9P5/vf//5JH/PXv/6VVatW8eqrr57S\ntUR6ihIYkRN49dVX6d+/PwAtLS3ceuutPP/889x6662ndb6Kigp+//vfd5jAAAwYMIC//e1vRyUw\nn3zyCXFxcad1vdPxb//2b1xyySU899xzAOTn53P11Vfz/vvvM2DAgB6L40wMGDAgZJKVzlgslqM+\nw3vvvccNN9zA6tWrsVqtJ32e5cuX+yM8kYDSFJLIKbBarUydOpUdO3YA0NzczL333sucOXOYO3cu\nDz30EG63G4CdO3dy5ZVXkpeXxyWXXMJnn30GwJVXXsmhQ4fIy8ujpaXluGtMmDCBDRs20NjY6Hvu\nvffeY8qUKb7HLS0t3H///cyZM4cZM2b4Eg2AzZs3c9lll5GXl8e8efP44osvAO+/6M8//3z+8Ic/\ncPHFFzN16lTee++9Dj/n7t27GTt2rO/x2LFjWb16tS+Re/rpp7nwwgtZuHAhL7zwAjNmzADgrrvu\n4plnnvEdd+TjE8X1wAMP8IMf/ACAb775hssvv5xZs2axePFiiouLAe+dqFtuuYXp06fzgx/8gLKy\nshOMWMfeeOMNbrzxRq6++moeeeQRNmzYwJVXXsnNN9/s+7J///33WbBgAXl5efzwhz+kqKgIgKee\neoq7776bRYsW8fLLLx913ptvvpkXX3zR93jHjh2cf/75eDwefvvb3zJnzhzmzJnDD3/4Qw4fPnzK\ncc+bN4+mpib27t0LwMqVK8nLy2PGjBncdtttNDU1Ad6f+4MPPsjFF1/M+++/f9Q4dPZ76fF4+PWv\nf820adNYtGgRO3fu9F3366+/5tJLL2XevHnMnTuX999//5RjF+l2hoh0KicnxygtLfU9rq2tNa66\n6irjmWeeMQzDMJ5//nnjuuuuM1pbW43Gxkbj8ssvN9566y3D7XYbc+fONd555x3DMAxjy5YtxsSJ\nE426ujrjq6++Mi666KIOr/eXv/zFuPPOO41/+7d/8x1bV1dnzJw503j99deNO++80zAMw3j66aeN\nq6++2mhubjYaGhqMhQsXGmvXrjUMwzAWLFhg/O1vfzMMwzDefPNN37WKi4uNUaNGGa+++qphGIbx\n3nvvGbNmzeowjptuusmYPn268corrxgFBQVHvbZr1y7j3HPPNcrLy43W1lbjpz/9qTF9+nTDMAzj\nzjvvNFasWOF775GPu4pr9OjRxhtvvOH7vBMnTjTWr19vGIZhvPPOO8all15qGIZhvPbaa8ZVV11l\ntLa2GtXV1cb06dN9P5MjdfUzbv85jxs3zti3b5/v/bm5ucYXX3xhGIZhlJSUGOecc46xf/9+wzAM\n47//+7+Nq6++2jAMw3jyySeN888/36iqqjruvO+++65x1VVX+R4/8cQTxn333Wfs3r3bmD17ttHS\n0mIYhmH84Q9/MN58881O42v/uYwcOfK45ydOnGgUFhYa//jHP4xJkyYZZWVlhmEYxj333GM89NBD\nhmF4f+4XX3yx0dTU5Hu8YsWKLn8v161bZ8yePduor683GhsbjUWLFhk/+MEPDMMwjMsuu8zYsGGD\nYRiGsW/fPuO2227rMnaRnqA7MCInsHTpUvLy8pg5cyYzZ87kvPPO47rrrgNg3bp1LF68mLCwMGw2\nGxdffDGff/45Bw8epLKykvnz5wOQm5tLeno6W7duPalrzp8/n7/97W8ArFmzhunTp2M2//Ov6yef\nfMKSJUuwWq1ERUVxySWX8OGHHwLw1ltvMXfuXADOOecc390LAJfLxWWXXQbA6NGjOXToUIfXf/TR\nR7nqqqt45513WLBgATNmzOB///d/Ae/dkYkTJ5KamkpYWBgLFiw4qc/UVVytra3MmjXLd/5+/fr5\n7jgtWLCAoqIiDh06xMaNG5k1axZhYWEkJiYeNc12rNLSUvLy8o7678hamaFDhzJ06FDfY5vNxqRJ\nkwD4/PPP+e53v8uQIUMAuOKKK9iwYQMulwvw3pFKSko67prTpk3j22+/pba2FoCPPvqIvLw84uLi\nqK6u5p133sFut7N06VIWLlx4Uj+3doZhsHLlSvr168fQoUNZu3Yt8+bNo1+/fgB8//vf9/0OAEya\nNImIiIijztHV7+U//vEPLrzwQqKjo7HZbL6xAkhOTuatt96isLCQoUOH8thjj51S7CL+oBoYkRNo\nr4Gprq72TX+EhXn/6lRXVxMfH+97b3x8PFVVVVRXVxMbG4vJZPK91v4llpKScsJrTpkyhbvvvpva\n2lreffddrr/+el9BLUBdXR0PPvggjz/+OOCdUjr77LMBeOedd/jDH/5AQ0MDHo8H44jtziwWi6/4\n2Gw24/F4Orx+REQEy5YtY9myZTgcDj744AMeeOABMjIysNvtR9XjJCcnn/DznExcMTExADgcDoqL\ni8nLy/O9brVaqa6uxm63Exsb63s+Li6OhoaGDq93ohqYI8ft2Mc1NTVHfcbY2FgMw6CmpqbDY9tF\nRUUxefJk1q1bxznnnIPD4eCcc87BZDLx1FNP8eKLL3LfffcxceJEfvWrX52wnsjtdvt+DoZhMHz4\ncJ555hnMZjN1dXV89NFHrF+/3vd6a2trp58P6PL30m63k5aWdtTz7R544AGeffZZrrnmGmw2G7fd\ndttR4yMSCEpgRE5SUlISS5cu5dFHH+XZZ58FICUlxfevbYDa2lpSUlJITk7GbrdjGIbvy6K2tvak\nv+zDw8OZPn06b731FgcOHGD8+PFHJTBpaWlce+21x92BOHz4MHfffTevv/46I0eOZP/+/cyZM+eU\nPmd1dTU7duzw3QGJi4tj8eLFfPbZZ+zevZvY2Fjq6uqOen+7Y5Miu91+ynGlpaWRmZnJG2+8cdxr\ncXFxnV67OyUnJ7N582bfY7vdjtlsJjEx8YTHzpkzh48++oiamhrmzJnjG//zzjuP8847D6fTycMP\nP8x//ud/nvBOxrFFvEdKS0vj0ksv5c477zylz9XZ72VXP9uUlBTuuece7rnnHtavX89NN93E1KlT\niY6OPulri3Q3TSGJnIJrrrmGzZs38/XXXwPeKYNVq1bhdrtxOp389a9/5cILLyQjI4P+/fv7imQ3\nbdpEZWUlZ599NmFhYTidTt90RGfmz5/P7373uw6XLs+cOZPXX38dt9uNYRg888wzfPrpp1RXVxMV\nFUVmZiYul4uVK1cCdHqXoiNNTU387Gc/8xV3Ahw4cID8/HzOPfdcxo8fz8aNG6mursblcvHWW2/5\n3peamuor/iwuLmbTpk0ApxTX2LFjqaioID8/33ee22+/HcMwGDduHGvXrsXtdlNdXc2nn3560p/r\nVEyZMoWNGzf6prn+9Kc/MWXKFN+dt65Mnz6dzZs3s2bNGt80zPr16/nVr36Fx+MhKiqKESNGHHUX\n5HTMmDGDDz/80JdorFmzhhdeeKHLY7r6vRw/fjzr16+nsbGRxsZGX+LU2trK0qVLKS8vB7xTj2Fh\nYUdNaYoEgu7AiJyCmJgYfvzjH/Pwww+zatUqli5dSnFxMfPnz8dkMpGXl8fcuXMxmUw8/vjj/Pu/\n/ztPP/00kZGRPPHEE0RFRXHWWWcRHx/PlClTePPNN0lPT+/wWt/5zncwmUzMmzfvuNeWLFnCwYMH\nmT9/PoZhMGbMGK6++mqioqK44IILmDNnDsnJydx1111s2rSJpUuX8uSTT57UZ0xPT+fZZ5/lySef\n5P7778cwDGJiYvj5z3/uW5n0ve99j0svvZTExERmz57Nnj17AFi8eDE33ngjs2fPZtSoUb67LCNG\njDjpuGw2G08++ST33XcfDQ0NhIeHc/PNN2MymVi8eDEbN27koosuIj09nYsuuuiouwZHaq+BOdYj\njzxywp9B//79uf/++7n++utpbW0lIyOD++6776R+fjExMYwePZpdu3Yxbtw4ACZOnMi7777LnDlz\nsFqtJCUl8cADDwBwxx13+FYSnYrRo0fzr//6ryxduhSPx0NycjK/+tWvujymq9/L6dOns27dOvLy\n8khJSeHCCy9k48aNhIeHs2jRIv7lX/4F8N5lu/vuu4mMjDyleEW6m8k4ciJaROQUbdy4kTvuuIO1\na9cGOhQR6UN0D1BERERCjhIYERERCTmaQhIREZGQozswIiIiEnKUwIiIiEjI8esy6qamJhYsWMD1\n11/PpEmTuOOOO3C73aSmpvLoo49itVp5++23eeWVVzCbzSxevJgrrrjihOetqOh42WR3SEyMoqbG\n6bfzy+nT2AQnjUvw0tgEL43NyUlNje30Nb/egXn22Wd97ayffPJJlixZwh//+EeGDBnCqlWrcDqd\nrFixgpdffplXX32VV1555aiupoEQFmYJ6PWlcxqb4KRxCV4am+ClsTlzfktgCgsLKSgoYNq0aQBs\n2LCBmTNnAt5OlV9++SX5+fnk5uYSGxuLzWZjwoQJvs6dIiIiIp3x2xTSww8/zD333ONrM97Y2IjV\nagW8+3FUVFRQWVl51I6uSUlJVFRUnPDciYlRfs1eu7plJYGlsQlOGpfgpbEJXhqbM+OXBOatt95i\n3LhxDBo0qMPXO1u5fbIruv05b5iaGuvXGhs5fRqb4KRxCV4am+ClsTk5XSV5fklg1q1bR3FxMevW\nraOsrAyr1UpUVBRNTU3YbDYOHz5MWloaaWlpVFZW+o4rLy/37R0iIiIi0hm/JDD/9V//5fvzU089\nxcCBA9m8eTOrV6/mkksu4cMPP2Tq1KmMHTuWu+++G4fDgcViYdOmTfziF7/wR0giIiLSi/TYbtQ3\n3XQTd955JytXriQ9PZ2FCxcSHh7O8uXLWbZsGSaTiRtuuIHYWM0JioiISNdCcisBf84bal4yeGls\ngpPGJXhpbIKXxubkBKwPjIiIiPS8des+Pqn3PfHEYxw6VNLp63fddVt3hdTtlMCIiIj0IqWlh1iz\nZvVJvffmm5eTnj6w09cfeujx7gqr2/VYDYyIiIj43+OPP8yOHduZOnUis2fPpbT0EP/1X8/w4IO/\npqKinMbGRq699sdMmTKVG2/8MbfddgeffPIxDQ31FBUdoKTkID/72XImTZrC/Pkzeffdj7nxxh8z\nceJ32bRpI7W1tTz88G9JSUnh17++h7KyUnJzz2bt2jW8+eZ7PfY5lcCIiIj4yZ/XFvCPneXHPW+x\nmHC7T68EdeKINBbPGN7p69///lLeeOPPDBuWRVHRfp555vfU1FTzne+cx9y5CygpOcg999zFlClT\njzquvPww//mfT/LVV1/w17/+hUmTphz1enR0NE888SzPPvsUn366lvT0DFpamnnhhZf5/PPP+POf\n//e0Ps/pUgLTS7ncHv5vTyXjc1KwmDVTKCLSF40cORqA2Ng4duzYzttvv4HJZMbhsB/33rPP9vZh\nS0tLo76+/rjXx44d73vdbrdz4MA+cnPHAjBp0hQslp7d30kJTC+1bnMJf1yzh3+ZO4ILxqYHOhwR\nkT5p8YzhHd4t6alVSOHh4QB89NEHOBwOVqz4PQ6Hgx/9aOlx7z0yAelogfKxrxuGgdnsfc5kMmEy\nmbo7/C7pn+a91OY93g7HOw7UBDgSERHpSWazGbfbfdRztbW1DBiQjtls5u9/X0tra+sZX2fgwAx2\n7foWgK+//uq4a/qbEpheqLHZxe7iWgB2FdWc9B5TIiIS+oYMGcauXTtpaPjnNNC0aTP44ovPuPnm\nnxIZGUlaWhovvfS7M7rO5MlTaWho4Kc/XUZ+/mbi4uLPNPRTokZ2x+gNzYW+2VXOije3YQIM4MGf\nnEe/xKhAh3XGesPY9EYal+ClsQlevWFsHA47mzZtZNq0mVRUlHPzzT/lj3/8S7deo8c3c5TAyi+o\nAmDymP58vq2MXUW1vSKBERGR4BEVFc3atWv44x9fxTA83HRTzza9UwLTy3gMgy17q4iLtjLnO4N9\nCYwKeUVEpDuFhYXx618/GLDrqwamlzlQVoejoYWzM5NJT40mJjKcXcWqgxERkd5FCUwvk1/gXX10\ndlYyhuEhZ1AC1Y5mKu1NAY5MRESk+yiB6WXyC6uwmE2EJVRx87pfkDygAYBdRbUBjkxERKT7KIHp\nRWrrmzlQVkfOoAQ2V23GwMAZWQzArmL1gxERkd5DCUwvsrXQu/ooNzORb6t2AVDaVERURJjuwIiI\nyFEWLboYp9PJq6++zLZtW456zel0smjRxV0ev27dxwC89947/P3vn/gtzs5oFVIvkt+WwCQOcOIs\naASg1HmYrME2tu2pp9rRRFKcLZAhiohIkFm69F9O+ZjS0kOsWbOaadNmMm9e14mOvyiB6SVaXR62\n76+mX2IkJc17AciKH0ahfR8J/ethj7cOZtKY/gGOVERE/Onaa6/igQceo3///pSVlfLzny8nNTWN\nxsZGmpqauPXW2xk1aozv/b/5zX8wbdpMxo0bzy9/eQctLS2+jR0BPvzwfVatWonFYmbo0CzuvPOX\nPP74w+zYsZ2XXvodHo+HhIQELr/8ezzzzBNs3ZqPy+Xm8ssXk5c3nxtv/DETJ36XTZs2Ultby8MP\n/5b+/c/8u0gJTC+xu7iW5hY3Y8emsLXqM6zmcBZkzuKJzS/gjqoAUtlVXKMERkSkB71R8Dc2l289\n7nmL2YTbc3rtLcan5XLZ8AWdvn7BBdP5/PNPufzyxXz22d+54ILpZGVlc8EF0/jmm3/wP//zCr/5\nzaPHHbd69ftkZmbxs58t5+OPP2TNmtUANDY28thjTxEbG8sNN1xHYWEB3//+Ut54489cc811/Pd/\nPw/A//3fJvbuLeTZZ1+ksbGRq6++kgsumAZAdHQ0TzzxLM8++xSffrqWxYuXnNZnP5JqYHqJ/ELv\n8unBg0yUOysZkZRDVvwwrBYrZc3F2KwW1cGIiPQB3gTmMwDWr/87559/IX//+8f89KfLePbZp7Db\n7R0et3//XsaMGQvA+PHn+J6Pi4vj5z9fzo03/pgDB/Zht3f8XbJz57eMGzcBgMjISIYOzaS42LuQ\nZOzY8QCkpaVRX1/f4fGnSndgegHDMNhSUIXNaqHBWgJAbspILGYLWfFD2VG9m2GDbOwobKC2vpmE\nmIgARywi0jdcNnxBh3dL/LkXUmZmFlVVFRw+XEZdXR2ffbaOlJQ07rnnPnbu/Jann/6vDo8zDDCb\nTQB42u4Otba28vjjj/Dyy38kOTmFO+64pdPrmkwmjuyZ6nK1+s5nsViOuE73NFbVHZheoKzaSXlt\nI6OHJbG9egcAo5NHApCTkAVA4gDvXxTdhRER6f0mTTqfF154hqlTL8Rur2XgwAwA/v73T3C5XB0e\nM3jwEHbu9H6HbNq0EQCnswGLxUJycgqHD5exc+cOXC4XZrMZt9t91PEjRoxm8+Zv2o5zUlJykIyM\nwf76iEpgeoMtbauPRgyLptC+nyFxg4iP8O7gmZ2YCYAnyjvFtKtYCYyISG934YXTfauE8vLms3Ll\n/3DrrTcwevQYqqqqePfdt487Ji9vPtu3b+Xmm39KcfEBTCYT8fEJTJz4XX70ox/y0ku/Y8mSpTz5\n5OMMGTKMXbt28uSTj/mOHzt2HGedNYIbbriOW2+9gX/91xuJjIz022c0GSG4SY4/tyAPxS3OH/nj\nJnYW1fIv349lZeHrLBg2h7nDZgLg9ri5/bN/JyEintLPv0NSXAS/ue68AEd8ekJxbPoCjUvw0tgE\nL43NyUlNje30Nd2BCXHOJhd7DtoZNiCWwvo9gLf+pZ23DmYYh50VDB1kpbTKiaOhJVDhioiIdAsl\nMCFu+/5q3B6D3MxEtlftIjEigYExA456T/s0UtIAb+X3bk0jiYhIiFMCE+K2tO0+nZTupNHVyJiU\nkZhMpqPek5PoLeR1t9fBqJBXRERCnBKYEOYxDLbsrSI+2kqF5wBw9PRRu0ExA4mwWDncchBrmFkb\nO4qISMhTAhPC9pU6qHO2cnZWMtuqdmC1WH3Lpo9kMVvIShhGeWMFQwZZOVjRQH1jawAiFhER6R5K\nYELYlgLv8ukhg82UOysZmZhNuCW8w/e2JzZJ/VUHIyIioU8JTAjLL6wkzGKiOeoQAGNSRnX63vY6\nGE+06mBERCT0KYEJUTV1zRQdruesQQnsqt2FCRNjUkZ0+v6MmHRsFhuHWw8SZlEdjIiIhDYlMCFq\nS9vmjSOyYnzdd+OsnTf8sZgtDE8YSkVjJUMywik+XE9Dk+pgREQkNCmBCVHt2wfYkqrwGJ4OVx8d\nK7ttGilpQD0GsKe44x1JRUREgp0SmBDU6nKzfX81/ZOiKGraC8CY5BMnMO2FvL46GE0jiYhIiFIC\nE4J2FdXS0uohd3jn3Xc7khHrrYMpbz2IxWxSIa+IiIQsJTAhKL9t+iglvZFGVyO5HXTf7YjZZGZ4\nwjAqm6oYPDCMA4fraGzueFt1ERGRYKYEJsQYhkF+QSWRERZqzUVA18unj9W+nDopvR7DgD0HVQcj\nIiKhRwlMiCmtclJpb2L0sGS+rdrZ1n0386SPb9/Y0RPtvYujOhgREQlFSmBCTH7b8ulhQ0yUN1Yy\nMimn0+67HcmISScyLJIK10HMJhO7VQcjIiIhSAlMiNlSUIUJcMceBiD3JFYfHam9DqaqqZqMgRb2\nl9XR3OL2Q6QiIiL+owQmhDQ0tbLnoJ1h6XHscXi7747uovtuZ9qnnJLT63F7DApKVAcjIiKhRQlM\nCNm+rxqPYTAyM5q99gMn7L7bmezE4QAYqoMREZEQpQQmhOS37T4dlVpz0t13OzIwpj9RbXUwJpM2\ndhQRkdCjBCZEeDwGW/dWkRBjpbR1HwC5p7B8+kjeOphMqptrGJhuZl+pg5ZW1cGIiEjoUAITIvaW\nOqhvbGVMVhLfVnu776ZH9z/t87X3g0lOb8DlNig85OiuUEVERPwuzF8nbmxs5K677qKqqorm5mau\nv/56Vq9ezfbt20lISABg2bJlTJs2jbfffptXXnkFs9nM4sWLueKKK/wVVsjKL/Aun+6X0cg3FU1M\n7DfhpLrvdia7rZDXWweTwa6iGkYOSeyOUEVERPzObwnMJ598wpgxY7juuusoKSnh2muvZfz48dx2\n221Mnz7d9z6n08mKFStYtWoV4eHhLFq0iFmzZvmSHPHaUlhFmMVMQ/hBgNOuf2mXHtOf6LAoKt0l\nmMhgd7HqYEREJHT4LYGZN2+e78+lpaX069evw/fl5+eTm5tLbKx3Nc2ECRPYtGkTM2bM8FdoIafa\n0URxeT2jhyXybc0GrBar7w7K6TKbzAxPzCS/YhsD0k0UHnLQ6vIQHqZZRRERCX5+S2DaXXnllZSV\nlfHcc8/x8ssv89prr/HSSy+RnJzMPffcQ2VlJUlJSb73JyUlUVFR0eU5ExOjCAuz+C3m1NRTX5rs\nTxvbVh/ljo7ir+VVfGfgONL7J53gqBMbnzHSm8AMbebQISs1jS5GZyaf8Xn9KdjGRrw0LsFLYxO8\nNDZnxu8JzJ/+9Cd27NjB7bffzi9+8QsSEhIYOXIkL7zwAk8//TTjx48/6v2GYZzwnDU1Tn+FS2pq\nLBUVdX47/+n44v9KAHCGFwOQE5vdLTGmh2cA0GI9DAxiw5YS0mKtZ3xefwnGsRGNSzDT2AQvjc3J\n6SrJ89t8wbZt2ygtLQVg5MiRuN1ucnJyGDnSW7sxY8YMdu/eTVpaGpWVlb7jysvLSUtL81dYIael\n1c23+6tJT4lmX8MeTJgYc4b1L+0GRPcjOjyKStdBwGCX6mBERCRE+C2B2bhxIy+++CIAlZWVOJ1O\n7r33XoqLvXcRNmzYQHZ2NmPHjmXr1q04HA4aGhrYtGkT5557rr/CCjk7i2ppcXl83XeHxg0i1hrT\nLec2m8xkJ2RS22Knf38TBSV2XG5Pt5xbRETEn/w2hXTllVfyy1/+kiVLltDU1MS9995LVFQUt9xy\nC5GRkURFRfHggw9is9lYvnw5y5Ytw2QyccMNN/gKeuWfu0/H9KvBc9jDmNNsXteZ7MQs/q9iG8kD\nGygri2Z/aR3DM+K79RoiIiLdzW8JjM1m47HHHjvu+b/85S/HPZeXl0deXp6/QglZhmGwpaCKqIgw\nKj0HgDNfPn2snARvQztiqoBodhXXKIEREZGgpzWzQexQZQNVjiZGZyawo2Y3SbbEM+q+25H+0WnE\nhEdT5S4BDO2LJCIiIUEJTBDLL/Qun+4/qIlGVxNjkkeeUffdjrTXwdhb7KSmGewpseP2qA5GRESC\nmxKYILaloBIT0GQ7BHT/9FG77LZ9kVIznDS3uDlQVu+X64iIiHQXJTBBqr6xlT0ldjIHxrHLvosI\ni9WXaHQ3X1ffGO8dn13FNX65joiISHdRAhOktu2rwjAga5iFisYqRiblEG72T831gOh+qoMREZGQ\n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\n","text/plain":["<matplotlib.figure.Figure at 0x7f9423d74b90>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"i4lGvqajDWlw","colab_type":"text"},"cell_type":"markdown","source":[" ## 불연속 특성에 대한 원-핫 인코딩\n","\n","문자열, 열거형, 정수 등의 불연속 특성은 일반적으로 로지스틱 회귀 모델을 학습하기 전에 이진 특성 패밀리로 변환됩니다.\n","\n","예를 들어 값으로 `0`, `1`, `2`만 취할 수 있는 합성 특성을 만들었으며 몇 개의 학습 포인트가 있다고 가정해 보겠습니다.\n","\n","| # | feature_value |\n","|---|---------------|\n","| 0 |             2 |\n","| 1 |             0 |\n","| 2 |             1 |\n","\n","가능한 각 범주 값에 대해 **실수값**으로 새 **이진** 특성을 만듭니다. 이 특성은 2가지 값만 취할 수 있는데, 예에 해당 값이 포함되었으면 1.0이고 그렇지 않으면 0.0입니다. 위 예제에서는 범주형 특성을 3개의 특성으로 변환하므로 이제 학습 포인트는 다음과 같습니다.\n","\n","| # | feature_value_0 | feature_value_1 | feature_value_2 |\n","|---|-----------------|-----------------|-----------------|\n","| 0 |             0.0 |             0.0 |             1.0 |\n","| 1 |             1.0 |             0.0 |             0.0 |\n","| 2 |             0.0 |             1.0 |             0.0 |"]},{"metadata":{"id":"KnssXowblKm7","colab_type":"text"},"cell_type":"markdown","source":[" ## 버킷화(비닝) 특성\n","\n","버킷화를 비닝이라고도 합니다.\n","\n","예를 들어 `population`을 다음과 같이 3가지로 버킷화할 수 있습니다.\n","- `bucket_0` (`< 5000`): 인구가 적은 지역에 해당\n","- `bucket_1` (`5000 - 25000`): 인구가 중간 정도인 지역에 해당\n","- `bucket_2` (`> 25000`): 인구가 많은 지역에 해당\n","\n","이러한 버킷 정의로 다음과 같은 `population` 벡터를 변환할 수 있습니다.\n","\n","    [[10001], [42004], [2500], [18000]]\n","\n","버킷화 특성 벡터는 다음과 같습니다.\n","\n","    [[1], [2], [0], [1]]\n","\n","특성 값은 이제 버킷 색인입니다. 이러한 색인은 불연속 특성으로 간주됩니다. 이러한 특성은 위와 같이 원-핫 표현으로 변환되는 것이 일반적이지만 이 과정은 투명하게 이루어집니다.\n","\n","버킷화 특성에 대한 특성 열을 정의하려면 `numeric_column`을 사용하는 대신 [`bucketized_column`](https://www.tensorflow.org/api_docs/python/tf/feature_column/bucketized_column)을 사용합니다. 이 특성 열은 입력으로 취한 숫자 열을 `boundardies` 인수에 지정된 버킷 경계를 사용하여 버킷화 특성으로 변환합니다. 다음 코드에서는 `households` 및 `longitude`에 대한 버킷화 특성 열을 정의합니다. `get_quantile_based_boundaries` 함수는 분위를 기준으로 경계를 계산하므로 각 버킷은 동일한 수의 요소를 포함합니다."]},{"metadata":{"id":"cc9qZrtRy-ED","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def get_quantile_based_boundaries(feature_values, num_buckets):\n","  boundaries = np.arange(1.0, num_buckets) / num_buckets\n","  quantiles = feature_values.quantile(boundaries)\n","  return [quantiles[q] for q in quantiles.keys()]\n","\n","# Divide households into 7 buckets.\n","households = tf.feature_column.numeric_column(\"households\")\n","bucketized_households = tf.feature_column.bucketized_column(\n","  households, boundaries=get_quantile_based_boundaries(\n","    california_housing_dataframe[\"households\"], 7))\n","\n","# Divide longitude into 10 buckets.\n","longitude = tf.feature_column.numeric_column(\"longitude\")\n","bucketized_longitude = tf.feature_column.bucketized_column(\n","  longitude, boundaries=get_quantile_based_boundaries(\n","    california_housing_dataframe[\"longitude\"], 10))"],"execution_count":0,"outputs":[]},{"metadata":{"id":"U-pQDAa0MeN3","colab_type":"text"},"cell_type":"markdown","source":[" ## 작업 1: 버킷화 특성 열로 모델 학습\n","**예의 모든 실수값 확률을 버킷화하고 모델을 학습시킨 후 결과가 개선되는지 확인합니다.**\n","\n","이전 코드 블록에서는 두 개의 실수값 열(`households` 및 `longitude`)을 버킷화 특성 열로 변환했습니다. 이번에 수행할 작업은 나머지 열을 버킷화한 후 코드를 실행하여 모델을 학습시키는 것입니다. 다양한 휴리스틱으로 버킷의 범위를 정할 수 있습니다. 이 실습에서는 분위 기반 방식을 사용하여 각 버킷에 동일한 수의 예가 포함되도록 버킷 경계를 선택합니다."]},{"metadata":{"id":"YFXV9lyMLedy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","\n","  #\n","  # YOUR CODE HERE: bucketize the following columns, following the example above:\n","  #\n","  bucketized_latitude = tf.feature_column.bucketized_column(latitude, boundaries = get_quantile_based_boundaries(\n","  training_examples[\"latitude\"],10))\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person])\n","  \n","  return feature_columns\n"],"execution_count":0,"outputs":[]},{"metadata":{"id":"0FfUytOTNJhL","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{},{}],"base_uri":"https://localhost:8080/","height":622},"outputId":"80f520ea-97a1-4c9d-af7d-bb47c418f764","executionInfo":{"status":"ok","timestamp":1521689222918,"user_tz":-540,"elapsed":189035,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training model...\n","RMSE (on training data):\n","  period 00 : 170.78\n","  period 01 : 144.52\n","  period 02 : 128.02\n","  period 03 : 116.79\n","  period 04 : 108.87\n","  period 05 : 102.89\n","  period 06 : 98.28\n","  period 07 : 94.70\n","  period 08 : 91.76\n","  period 09 : 89.27\n","Model training finished.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\nRU5ErkJggg==\n","text/plain":["<matplotlib.figure.Figure at 0x7f942da6b7d0>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"ZTDHHM61NPTw","colab_type":"text"},"cell_type":"markdown","source":[" ### 해결 방법\n","\n","해결 방법을 보려면 아래를 클릭하세요."]},{"metadata":{"id":"JQHnUhL_NRwA","colab_type":"text"},"cell_type":"markdown","source":[" 사용할 버킷 수를 어떠한 기준으로 결정하는지 궁금할 수 있습니다. 물론 데이터 자체와는 무관합니다. 여기에서는 모델이 너무 커지지 않는 선에서 임의로 값을 선택했습니다."]},{"metadata":{"id":"Ro5civQ3Ngh_","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"RNgfYk6OO8Sy","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"AFJ1qoZPlQcs","colab_type":"text"},"cell_type":"markdown","source":[" ## 특성 교차\n","\n","둘 이상의 특성을 교차하는 것은 선형 모델을 사용하여 비선형 관계를 학습하는 효과적인 방법입니다. 이 문제에서 `latitude` 특성만 학습에 사용하면 모델은 특정 위도에 있는 지역, 버킷화를 거쳤으므로 정확히는 특성 위도 범위에 포함된 지역이 다른 지역보다 집값이 비쌀 가능성이 높다는 사실을 학습할 수 있습니다. 그러나 `longitude`와 `latitude`를 교차하면 이 교차 특성은 잘 정의된 지역을 나타냅니다. 모델에서 위도 및 경도 범위에 포함된 특정 지역이 다른 지역보다 집값이 비쌀 가능성이 높다는 사실을 학습하면 두 특성을 개별적으로 고려할 때보다 강한 신호가 됩니다.\n","\n","현재 특성 열 API는 불연속 특성에 대해서만 교차를 지원합니다. `latitude` 또는 `longitude` 등의 두 연속 특성을 교차하려면 버킷화를 거쳐야 합니다.\n","\n","`latitude` 특성과 `longitude` 특성을 교차할 때 longitude`를 `2`개 버킷으로, `latitude`를 `3`개 버킷으로 만들었다면 실제로 6개의 교차 이진 특성을 얻게 됩니다. 모델을 학습시킬 때 이러한 각 특성에 별도의 가중치가 부여됩니다."]},{"metadata":{"id":"-Rk0c1oTYaVH","colab_type":"text"},"cell_type":"markdown","source":[" ## 작업 2: 특성 교차를 사용하여 모델 학습\n","\n","**모델에 `longitude`와 `latitude`의 특성 교차를 추가하고 학습시켜 결과가 개선되는지 여부를 판단합니다.**\n","\n","TensorFlow API 문서에서 [`crossed_column()`](https://www.tensorflow.org/api_docs/python/tf/feature_column/crossed_column)을 참조하여 교차 특성 열을 작성하세요. `hash_bucket_size`는 `1000`으로 지정합니다."]},{"metadata":{"id":"-eYiVEGeYhUi","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}},"cellView":"both"},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross\n","  long_x_lat = tf.feature_column.crossed_column(set([bucketized_households,bucketized_longitude]),hash_bucket_size = 1000)\n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person,\n","    long_x_lat])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"xZuZMp3EShkM","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0},"output_extras":[{},{}],"base_uri":"https://localhost:8080/","height":622},"outputId":"dfde2f03-1a88-445a-e5ca-a453a86baabd","executionInfo":{"status":"ok","timestamp":1521689553627,"user_tz":-540,"elapsed":196126,"user":{"displayName":"","photoUrl":"","userId":""}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[{"output_type":"stream","text":["Training model...\n","RMSE (on training data):\n","  period 00 : 166.41\n","  period 01 : 138.66\n","  period 02 : 121.94\n","  period 03 : 111.00\n","  period 04 : 103.49\n","  period 05 : 98.09\n","  period 06 : 93.97\n","  period 07 : 90.69\n","  period 08 : 88.05\n","  period 09 : 85.90\n","Model training finished.\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAjAAAAGACAYAAACz01iHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzs3XdYFNf6B/DvbKEsLL0KImAXEQsY\nERtWFI2NmFiImtx4EzUxiUlMfje9m9zkGhM1PbbkJmrsXWNDjQVRBAVR6b33vju/P7zZiLK4KAsL\nfD/P4/O4c86ceXffRV7PzJkRRFEUQURERNSKSFo6ACIiIqLGYgFDRERErQ4LGCIiImp1WMAQERFR\nq8MChoiIiFodFjBERETU6shaOgAiQ9a9e3e4ublBKpUCAFQqFfz8/PD6669DoVDc97ibNm3CjBkz\n7tq+detWvPbaa/j6668RGBio2V5ZWYnBgwdj7Nix+Pjjj+/7uLpKTk7Ghx9+iISEBACAqakpFi9e\njNGjR+v92I2xevVqJCcn3/WZnD17Fk8++SRcXV3v2mf//v3NFd4DSU1NxahRo+Dh4QEAEEURdnZ2\n+Ne//oVevXo1aqzPPvsMHTp0wMyZM3XeZ8eOHdiyZQs2bNjQqGMRNRcWMET3sGHDBjg5OQEAqqur\n8cILL+Cbb77BCy+8cF/j5eTk4Pvvv6+3gAEAZ2dn7N69u04Bc/ToUVhYWNzX8e7HSy+9hMmTJ+Pr\nr78GAERGRmLu3LnYt28fnJ2dmy2OB+Hs7NxqihVtpFJpnfewd+9eLFq0CAcOHICRkZHO4yxdulQf\n4RG1KJ5CImoEIyMjDB06FDExMQCAqqoqvPnmmxg3bhzGjx+Pjz/+GCqVCgAQGxuLxx57DEFBQZg8\neTLCwsIAAI899hjS09MRFBSE6urqu47Rv39/nD17FhUVFZpte/fuRUBAgOZ1dXU13n//fYwbNw4j\nR47UFBoAcPHiRUybNg1BQUGYMGECTp8+DeDW/+iHDBmC9evXY9KkSRg6dCj27t1b7/uMi4uDj4+P\n5rWPjw8OHDigKeS++uorDB8+HFOmTMG3336LkSNHAgBeffVVrF69WrPf7a/vFdeHH36IOXPmAAAu\nXLiA6dOnY8yYMZgxYwZSUlIA3JqJev755xEYGIg5c+YgMzPzHhmr39atW7F48WLMnTsXn3zyCc6e\nPYvHHnsMS5Ys0fyy37dvHyZOnIigoCA8/vjjSE5OBgB8+eWXeP311xESEoK1a9fWGXfJkiX48ccf\nNa9jYmIwZMgQqNVq/Oc//8G4ceMwbtw4PP7448jKymp03BMmTEBlZSXi4+MBAL/99huCgoIwcuRI\nvPjii6isrARw63P/6KOPMGnSJOzbt69OHrR9L9VqNd59912MGDECISEhiI2N1Rz33LlzmDp1KiZM\nmIDx48dj3759jY6dqMmJRKRVt27dxIyMDM3rwsJCcfbs2eLq1atFURTFb775RnzqqafEmpoasaKi\nQpw+fbq4fft2UaVSiePHjxd37doliqIoXr58WfTz8xNLSkrEM2fOiKNHj673eL///ru4bNky8aWX\nXtLsW1JSIo4aNUrcvHmzuGzZMlEURfGrr74S586dK1ZVVYllZWXilClTxCNHjoiiKIoTJ04Ud+/e\nLYqiKG7btk1zrJSUFLFXr17ihg0bRFEUxb1794pjxoypN45nn31WDAwMFNetWyfeuHGjTtu1a9dE\nX19fMTs7W6ypqRGfeeYZMTAwUBRFUVy2bJm4atUqTd/bXzcUl5eXl7h161bN+/Xz8xNPnjwpiqIo\n7tq1S5w6daooiqK4ceNGcfbs2WJNTY2Yn58vBgYGaj6T2zX0Gf/1Offt21dMSEjQ9Pf29hZPnz4t\niqIopqWliQMGDBATExNFURTFH374QZw7d64oiqK4cuVKcciQIWJeXt5d4+7Zs0ecPXu25vUXX3wh\nvvfee2JcXJw4duxYsbq6WhRFUVy/fr24bds2rfH99bn07Nnzru1+fn7izZs3xfPnz4v+/v5iZmam\nKIqi+MYbb4gff/yxKIq3PvdJkyaJlZWVmterVq1q8Ht57NgxcezYsWJpaalYUVEhhoSEiHPmzBFF\nURSnTZsmnj17VhRFUUxISBBffPHFBmMnag6cgSG6h9DQUAQFBWHUqFEYNWoUBg0ahKeeegoAcOzY\nMcyYMQMymQwmJiaYNGkSTp06hdTUVOTm5iI4OBgA4O3tjQ4dOiAqKkqnYwYHB2P37t0AgMOHDyMw\nMBASyd8/rkePHsWsWbNgZGQEhUKByZMn4+DBgwCA7du3Y/z48QCAAQMGaGYvAKC2thbTpk0DAHh5\neSE9Pb3e43/66aeYPXs2du3ahYkTJ2LkyJH473//C+DW7Iifnx/s7e0hk8kwceJEnd5TQ3HV1NRg\nzJgxmvEdHR01M04TJ05EcnIy0tPTER4ejjFjxkAmk8Ha2rrOabY7ZWRkICgoqM6f26+VcXd3h7u7\nu+a1iYkJ/P39AQCnTp3CQw89hE6dOgEAHnnkEZw9exa1tbUAbs1I2djY3HXMESNG4OrVqygsLAQA\nHDp0CEFBQbCwsEB+fj527dqFoqIihIaGYsqUKTp9bn8RRRG//fYbHB0d4e7ujiNHjmDChAlwdHQE\nAMycOVPzHQAAf39/GBsb1xmjoe/l+fPnMXz4cJiZmcHExESTKwCwtbXF9u3bcfPmTbi7u+Ozzz5r\nVOxE+sBrYIju4a9rYPLz8zWnP2SyWz86+fn5sLS01PS1tLREXl4e8vPzoVQqIQiCpu2vX2J2dnb3\nPGZAQABef/11FBYWYs+ePVi4cKHmgloAKCkpwUcffYTPP/8cwK1TSn369AEA7Nq1C+vXr0dZWRnU\najXE2x53JpVKNRcfSyQSqNXqeo9vbGyMJ598Ek8++SSKi4uxf/9+fPjhh3B1dUVRUVGd63FsbW3v\n+X50icvc3BwAUFxcjJSUFAQFBWnajYyMkJ+fj6KiIiiVSs12CwsLlJWV1Xu8e10Dc3ve7nxdUFBQ\n5z0qlUqIooiCgoJ69/2LQqHA4MGDcezYMQwYMADFxcUYMGAABEHAl19+iR9//BHvvfce/Pz88M47\n79zzeiKVSqX5HERRRJcuXbB69WpIJBKUlJTg0KFDOHnypKa9pqZG6/sD0OD3sqioCA4ODnW2/+XD\nDz/EmjVrMH/+fJiYmODFF1+skx+ilsAChkhHNjY2CA0Nxaeffoo1a9YAAOzs7DT/2waAwsJC2NnZ\nwdbWFkVFRRBFUfPLorCwUOdf9nK5HIGBgdi+fTuSkpLQr1+/OgWMg4MDnnjiibtmILKysvD6669j\n8+bN6NmzJxITEzFu3LhGvc/8/HzExMRoZkAsLCwwY8YMhIWFIS4uDkqlEiUlJXX6/+XOoqioqKjR\ncTk4OMDT0xNbt269q83CwkLrsZuSra0tLl68qHldVFQEiUQCa2vre+47btw4HDp0CAUFBRg3bpwm\n/4MGDcKgQYNQXl6O5cuX49///vc9ZzLuvIj3dg4ODpg6dSqWLVvWqPel7XvZ0GdrZ2eHN954A2+8\n8QZOnjyJZ599FkOHDoWZmZnOxyZqajyFRNQI8+fPx8WLF3Hu3DkAt04ZbNmyBSqVCuXl5dixYweG\nDx8OV1dXODk5aS6SjYiIQG5uLvr06QOZTIby8nLN6QhtgoOD8d1339W7dHnUqFHYvHkzVCoVRFHE\n6tWrceLECeTn50OhUMDT0xO1tbX47bffAEDrLEV9Kisr8dxzz2ku7gSApKQkREZGwtfXF/369UN4\neDjy8/NRW1uL7du3a/rZ29trLv5MSUlBREQEADQqLh8fH+Tk5CAyMlIzzssvvwxRFNG3b18cOXIE\nKpUK+fn5OHHihM7vqzECAgIQHh6uOc3166+/IiAgQDPz1pDAwEBcvHgRhw8f1pyGOXnyJN555x2o\n1WooFAr06NGjzizI/Rg5ciQOHjyoKTQOHz6Mb7/9tsF9Gvpe9uvXDydPnkRFRQUqKio0hVNNTQ1C\nQ0ORnZ0N4NapR5lMVueUJlFL4AwMUSOYm5tjwYIFWL58ObZs2YLQ0FCkpKQgODgYgiAgKCgI48eP\nhyAI+Pzzz/HWW2/hq6++gqmpKb744gsoFAp0794dlpaWCAgIwLZt29ChQ4d6jzVw4EAIgoAJEybc\n1TZr1iykpqYiODgYoiiid+/emDt3LhQKBYYNG4Zx48bB1tYWr776KiIiIhAaGoqVK1fq9B47dOiA\nNWvWYOXKlXj//fchiiLMzc3x2muvaVYmPfroo5g6dSqsra0xduxYXL9+HQAwY8YMLF68GGPHjkWv\nXr00syw9evTQOS4TExOsXLkS7733HsrKyiCXy7FkyRIIgoAZM2YgPDwco0ePRocOHTB69Og6swa3\n++samDt98skn9/wMnJyc8P7772PhwoWoqamBq6sr3nvvPZ0+P3Nzc3h5eeHatWvo27cvAMDPzw97\n9uzBuHHjYGRkBBsbG3z44YcAgFdeeUWzkqgxvLy88PTTTyM0NBRqtRq2trZ45513Gtynoe9lYGAg\njh07hqCgINjZ2WH48OEIDw+HXC5HSEgI5s2bB+DWLNvrr78OU1PTRsVL1NQE8fYT0UREjRQeHo5X\nXnkFR44caelQiKgd4RwgERERtTosYIiIiKjV4SkkIiIianU4A0NEREStDgsYIiIianVa5TLqnJz6\nl002BWtrBQoKyvU2Pt0/5sYwMS+Gi7kxXMyNbuztlVrbOANzB5lM2tIhkBbMjWFiXgwXc2O4mJsH\nxwKGiIiIWh0WMERERNTqsIAhIiKiVocFDBEREbU6LGCIiIio1WEBQ0RERK0OCxgiIiJqdVjAEBER\ntTHHjv2hU78vvvgM6elpWttfffXFpgqpybGAISIiakMyMtJx+PABnfouWbIUHTq4aG3/+OPPmyqs\nJtcqHyVARERE9fv88+WIibmCoUP9MHbseGRkpGPFitX46KN3kZOTjYqKCjzxxAIEBAzF4sUL8OKL\nr+Do0T9QVlaK5OQkpKWl4rnnlsLfPwDBwaOwZ88fWLx4Afz8HkJERDgKCwuxfPl/YGdnh3fffQOZ\nmRnw9u6DI0cOY9u2vc32PlnAEBER6cmmIzdwPjb7ru1SqQCVSryvMf16OGDGyC5a22fODMXWrZvg\n4dEZycmJWL36exQU5GPgwEEYP34i0tJS8cYbryIgYGid/bKzs/Dvf6/EmTOnsWPH7/D3D6jTbmZm\nhi++WIM1a77EiRNH0KGDK6qrq/Dtt2tx6lQYNm367329n/vFAuY2uYUVyCyugpOFcUuHQkRE9MB6\n9vQCACiVFoiJuYKdO7dCECQoLi66q2+fPn0BAA4ODigtLb2r3cenn6a9qKgISUkJ8Pb2AQD4+wdA\nKm3e5zuxgLnNjlMJOBWVibfn+8HNUfsTMImIiHQxY2SXemdL7O2VyMkp0fvx5XI5AODQof0oLi7G\nqlXfo7i4GP/4R+hdfW8vQETx7tmhO9tFUYREcmubIAgQBKGpw28QL+K9zUM9HQEA28MSWjgSIiKi\n+yORSKBSqepsKywshLNzB0gkEhw/fgQ1NTUPfBwXF1dcu3YVAHDu3Jm7jqlvLGBu4+VhAy9PW1y6\nkYubaXdPrxERERm6Tp08cO1aLMrK/j4NNGLESJw+HYYlS56BqakpHBwc8NNP3z3QcQYPHoqysjI8\n88yTiIy8CAsLywcNvVEEsb55IgOnz2m3rOIqvLb6FHp2ssbLM/vp7TjUeM015UqNw7wYLubGcLWF\n3BQXFyEiIhwjRoxCTk42lix5Br/88nuTHsPeXvvlHLwG5g69O9vBy8MGVxLyEZNUgJ6drFs6JCIi\nIoOjUJjhyJHD+OWXDRBFNZ59tnlvescCph5Th3riSkI+tp2IR485/Zv9wiQiIiJDJ5PJ8O67H7XY\n8XkNTD08O1igX1c73EgrQlR8fkuHQ0RERHdgAaPF1KGeEABsOxFf73IyIiIiajksYLRwdTCHX08H\nJGWVICIup6XDISIiotuwgGnAlKGeEARgW1gC1GrOwhARERkKFjANcLJRIKC3M9Jzy3A2JqulwyEi\nImoyISGTUF5ejg0b1iI6+nKdtvLycoSETGpw/2PH/gAA7N27C8ePH9VbnNqwgLmHhwPcIZUI2BGW\ngFqVuqXDISIialKhofPQu3efRu2TkZGOw4cPAAAmTJiE4cMD9RFag7iM+jbHUk/h+tXrmNdjDuSS\nWx+NnZUphvXtgKMRaTgVlYHhfV1aOEoiIiLtnnhiNj788DM4OTkhMzMDr722FPb2DqioqEBlZSVe\neOFl9OrVW9P/gw/exogRo9C3bz/861+voLq6WvNgRwA4eHAftmz5DVKpBO7unbFs2b/w+efLERNz\nBT/99B3UajWsrKwwffqjWL36C0RFRaK2VoXp02cgKCgYixcvgJ/fQ4iICEdhYSGWL/8PnJycHvh9\nsoC5TXFVCS5lXsUpi7MY4fr3Y8Qn+rvj5OUM7DyViMG9nSCXNe8TN4mIqHXaemM3LmZH3bVdKhGg\nus9rK/s5eGNal4la24cNC8SpUycwffoMhIUdx7BhgejcuSuGDRuBCxfO4+ef1+GDDz69a78DB/bB\n07MznntuKf7446BmhqWiogKfffYllEolFi16Cjdv3sDMmaHYunUT5s9/Cj/88A0A4NKlCMTH38Sa\nNT+ioqICc+c+hmHDRgAAzMzM8MUXa7BmzZc4ceIIZsyYdV/v/XY8hXSbwI5DYCwzxoHEI6hWVWu2\nWyuNMbK/CwpKqnDsUnoLRkhERNSwWwVMGADg5MnjGDJkOI4f/wPPPPMk1qz5EkVF9T/rLzExHr17\n+wAA+vUboNluYWGB115bisWLFyApKQFFRYX17h8bexV9+/YHAJiamsLd3RMpKSkAAB+fW4/mcXBw\nQGlpab37NxZnYG6jNDJHcLdAbL26H8dTT2NMpxGatgmDOuHYpXTs+TMJw/p0gLERZ2GIiKhh07pM\nrHe2RJ/PQvL07Iy8vBxkZWWipKQEYWHHYGfngDfeeA+xsVfx1Vcr6t1PFAGJ5Nad5/9aeVtTU4PP\nP/8Ea9f+AltbO7zyyvNajysIAm6/bVptbY1mPKn079+ZTXVvNc7A3GFS9zEwlZniUNIxVNRWarYr\nFUYY69sRxWXV+CMitQUjJCIiapi//xB8++1qDB06HEVFhXBxcQUAHD9+FLW1tfXu4+bWCbGxMQCA\niIhwAEB5eRmkUilsbe2QlZWJ2NgY1NbWQiKRQKVS1dm/Rw8vXLx44X/7lSMtLRWurm76eossYO5k\nZqTAaLdhKKstx9GUsDpt4wZ2hMJYhn1nklBeWf8XgIiIqKUNHx6Iw4cPYMSIUQgKCsZvv/2MF15Y\nBC+v3sjLy8OePTvv2icoKBhXrkRhyZJnkJKSBEEQYGlpBT+/h/CPfzyOn376DrNmhWLlys/RqZMH\nrl2LxcqVn2n29/Hpi+7de2DRoqfwwguL8PTTi2Fqaqq39yiIrfA++fp8BLm9vRIpGbl468+PUatW\n4d3Br8JMrtC07/kzEb8fj8fDAe6YMtRTb3HQ3drC4+fbIubFcDE3hou50Y29vVJrG2dg6mEiM8bY\nToGoVFXicPLxOm2jBrjCQiHHwfMpKK2oaaEIiYiI2je9FjBxcXEYPXo0Nm7cCODWxUBLly5FSEgI\n5s6dq7kSeufOnZg+fToeeeQRbN68WZ8h6Wyoiz8sjSxwLOUkiqr+rpJNjGSY4O+OymoV9p1JasEI\niYiI2i+9FTDl5eV477334O/vr9m2adMmWFtbY8uWLZgwYQLCw8NRXl6OVatWYe3atdiwYQPWrVuH\nwsL6l2g1JyOpHEHuo1CtrsGhpLq3SA7s1wHWSmP8cSEVhaVVLRQhERFR+6W3AsbIyAjfffcdHBwc\nNNuOHj2Khx9+GADw6KOPYtSoUYiMjIS3tzeUSiVMTEzQv39/RERE6CusRhncwQ+2JtYIS/sTBZV/\nF1VymRSTBrujulaNPX9yFoaIiKi56e0+MDKZDDJZ3eHT0tJw4sQJfPrpp7Czs8Nbb72F3Nxc2NjY\naPrY2NggJyenwbGtrRWQ6fFuuLdfNPRon0lYfW49jmWewAK/2ZrtU0d1w8HwFBy/lI5Z43vCwVpR\n31DUxBq6oItaDvNiuJgbw8XcPJhmvZGdKIrw8PDA4sWLsXr1anzzzTfo1avXXX3upaCgXF8h3nVl\neA9FTzgq7HEk4TSGOATAXmGraQse1Ak/7InBul3RmDe+p95iolt41b5hYl4MF3NjuJgb3RjMKiQ7\nOzv4+fkBAIYMGYIbN27AwcEBubm5mj7Z2dl1Tju1NKlEimCPMVCLauxNPFSnzd/LCc62Cpy8nIms\nfP0VVURERFRXsxYww4YNQ1jYrZvDXblyBR4eHvDx8UFUVBSKi4tRVlaGiIgI+Pr6NmdY99TPoQ9c\nzJ1xPvMiMsqyNNslEgFThnpCLYrYcSqhBSMkIiJqX/RWwERHRyM0NBTbtm3D+vXrERoaismTJ+P4\n8eOYOXMmDh8+jAULFsDExARLly7Fk08+ifnz52PRokVQKg3rvKBEkGCix1iIELEn/mCdtgHd7eHm\nYI6zV7KQmtM0D6giIiKihvFOvHfQdl5SFEV8euErJBWn4FW/JeiodNG0XbqRi5VbLqN/N3ssnuat\nt9jaO54zNkzMi+FibgwXc6Mbg7kGpjUTBAGTPMcBAHbHH6jT5tPZFp07WCAiLgeJmcUtER4REVG7\nwgKmEXpYd0UXKw9E58Uivujv+78IgoCpw249F2nrifiWCo+IiKjdYAHTCLdmYYIAALvumIXp5W6D\nHm5WiI7PR1xKy99JmIiIqC1jAdNIXaw80NOmG+IKbuBa/o06bdOGdQYAbDsRr9P9bIiIiOj+sIC5\nD39dC7Mr/kCdQqWLqyX6dLbFtZRCXE0qaKnwiIiI2jwWMPehk0VH+Nh5IaE4CVfyYuu0TR36v2th\njnMWhoiISF9YwNynYM+xECBgd/wBqEW1ZnsnJyUGdLdHQkYxIm/ktWCEREREbRcLmPvkYu6MAY4+\nSClNR2TOlTptU4Z6QsCtFUlqzsIQERE1ORYwD2CCxxhIBMldszAudmYY5OWI1JxShMdmt2CERERE\nbRMLmAfgqLDHQ04DkFmejfCsS3XaJg/xgEQQsD0sASq1WssIREREdD9YwDyg8e6jIRWk2BN/ECq1\nSrPdwVqBIX2ckZlfjj+jsxoYgYiIiBqLBcwDsjW1RkCHh5BbmY8zGeF12h4OcIdMKmDnqQTUqjgL\nQ0RE1FRYwDSBIPeRkEtk2Jt4GDWqGs12GwsTjOjngtyiSoRFprdghERERG0LC5gmYGlsgWGug1FY\nVYST6WfrtAX7u8NILsGu04morlFpGYGIiIgagwVMExnrFghjqREOJB5Blapas93SzAijB3REYWk1\njl5Ma8EIiYiI2g4WME3E3MgMIzsORUlNKY6nnqrTFvSQG0yNpdjzZxIqq2tbKEIiIqK2gwVMExrZ\ncRgUMlMcSjqGitoKzXZzUznG+bmhtKIGh8JTWzBCIiKitoEFTBNSyE0x2m04ymsrcCQ5rE7bGL+O\nMDeVY//ZZJRV1mgZgYiIiHTBAqaJjeg4BEq5OY6khKG0pkyz3dRYhvGD3FBRVYsD55JbMEIiIqLW\njwVMEzOWGmGseyAqVVU4nHS8TtvI/q6wNDPCofOpKC6r1jICERER3QsLGD0Y2mEQrIwtcSz1FIqq\nSjTbjeVSTBzsjqoaFfaeSWrBCImIiFo3FjB6IJfKEeQ+CjXqGhxIOlKnbZhPB9haGONIRBoKSqpa\nKEIiIqLWjQWMnvg7+8LWxAan0s4gv7JAs10uk2BSgAdqVWrsPp3YcgESERG1Yixg9EQmkSHYYwxq\nRRX2JfxRpy3A2wkO1qY4EZmOnMIKLSMQERGRNixg9MjPqR8cFQ44kxmO7PJczXapRIIpQzygUovY\neSqhBSMkIiJqnVjA6JFEkGCi51ioRTX2Jhyq0zawlyNc7M1wOjoTGXllWkYgIiKi+rCA0bO+9r3h\nYu6M8KxLSC/N1GyXCAKmDPGEKALbwzgLQ0RE1BgsYPRMIkgwyXMcRIjYk3CwTlv/bnZwd1LifGw2\nkrNKtIxAREREd2IB0wx62/aEu4UbLuVEI7n472chCYKAacM8AXAWhoiIqDFYwDQDQRAwyXMcAGBX\nwoE6bV4eNujqaolLN3JxM72oJcIjIiJqdVjANJPu1l3Q1coTV/Ou4WZhomb77bMw207Et1B0RERE\nrQsLmGZyaxYmCACwK34/RFHUtHV3s4aXuzWuJhYgNqlA2xBERET0PyxgmlFnK3f0su2O64XxuFZw\no07b1GGdAQBbw+LrFDdERER0NxYwzWySx61rYXbHH6hTqHh2sEDfLna4kVqEqPj8lgqPiIioVWAB\n08zcLFzR1743EoqTEZ0XU6dt6m3XwnAWhoiISDsWMC0g2GMsBAjYHX8QalGt2d7RwRwDezogKasE\nEXE5LRghERGRYWMB0wI6mDvB17EvUkvTcSknuk7b5CEeEIRb94VRqzkLQ0REVB8WMC1kgscYSATJ\nXbMwzrZmCOjtjLTcMpyNyWrBCImIiAwXC5gW4qCwwyAnX2SVZ+N85sU6bQ8HuEMqEbDjZAJqVWot\nIxAREbVfLGBa0HiPUZAJUuxJOASVWqXZbmdlimF9OyC7oAKnozMbGIGIiKh9YgHTgmxMrBHgMgh5\nlfk4nXG+TttEf3fIZRLsPJWAmlrOwhAREd2OBUwLG9dpJOQSOfYn/oEaVY1mu7XSGCP7uyC/uArH\nL6W1YIRERESGhwVMC7M0VmKEawAKq4oQln6mTtv4QZ1gbCTF7j+TUFWt0jICERFR+8MCxgCM7jQc\nJlJjHEw8israKs12C4URxvh2RHFZNY5EpLZghERERIaFBYwBMJebYWTHoSipKcXx1FN12oIGdoTC\nWIa9Z5JQXlnbQhESEREZFhYwBmKk21AoZKY4lHwc5TUVmu0KEzmCHnJDWWUtDoWntGCEREREhoMF\njIEwlZliTKcRqKitwJGUE3XaRvu6QqmQ48C5ZJRW1GgZgYiIqP1gAWNAhrsGQGlkjiMpYSitLtNs\nNzGSIXhQJ1RWq7DvbFILRkh/Iz91AAAgAElEQVRERGQYWMAYEGOpEcZ1GokqVTUOJh+t0xbY3wXW\nSmP8EZ6KotIqLSMQERG1DyxgDMyQDg/BytgSJ1JPo6iqWLNdLpNi4mB3VNeqsedPzsIQEVH7xgLG\nwMilckxwH40adS0OJB2p0za0jzPsLE1w7FIa8ooqWyhCIiKilscCxgANcvaFnaktTqadRV5FgWa7\nTCrB5CEeqFWJ2HU6oQUjJCIialksYAyQVCJFsMcYqEQV9icertPm7+UEZ1sFTl7ORFZBeQtFSERE\n1LJYwBgoX8e+cDJzxJnMC8guz9Fsl0gETBnqCbUoYsdJzsIQEVH7xALGQEkECSZ6jIVaVGNPwqE6\nbQO626OjgznOXslCWk5pC0VIRETUcljAGDAfey90NO+AC1mRSC/N1GyXCAKmDvOECGB7GGdhiIio\n/WEBY8AkggQTPcdBhIjdCQfrtPl0toVnBwtciMtBYmaxlhGIiIjaJhYwBs7Ltgc8LDohMicaScV/\nPwtJEARMG+YJANh2grMwRETUvrCAMXCCIODhzuMAALvj687C9OxkjR5uVoiKz8P11MKWCI+IiKhF\nsIBpBbpZd0E36y64mn8NNwr/nm0R/nctDABsPR4PURRbKkQiIqJmxQKmlZjkeWsWZlf8/jqFSldX\nK3h72uJaSiGuJhVo252IiKhNYQHTSnhadkJv2x64UZiA2ILrddr+vhaGszBERNQ+6LWAiYuLw+jR\no7Fx48Y628PCwtC9e3fN6507d2L69Ol45JFHsHnzZn2G1KpN1MzCHKhTqHRyUmJAd3vEpxcj8kZe\nS4VHRETUbPRWwJSXl+O9996Dv79/ne1VVVX49ttvYW9vr+m3atUqrF27Fhs2bMC6detQWMgLUuvT\nUemCfvbeSCpOQVTu1TptU4Z4QACwLSweas7CEBFRG6e3AsbIyAjfffcdHBwc6mz/+uuvMWvWLBgZ\nGQEAIiMj4e3tDaVSCRMTE/Tv3x8RERH6CqvVC/YcCwECdicchFpUa7a72JtjkJcjUrJLER6b3YIR\nEhER6Z/eChiZTAYTE5M62xISEhAbG4vx48drtuXm5sLGxkbz2sbGBjk5OaD6OZs5ws+pH9JKM3Ax\n+3KdtoeHeEAiCNgelgCVWq1lBCIiotZP1pwH++ijj/D666832EeXi1CtrRWQyaRNFdZd7O2Vehu7\nKcwZMAUX9l7C/uQ/MKbXYEgltz4Le3slxjzkhgNnknAluQij/NxaONKmZ+i5aa+YF8PF3Bgu5ubB\nNFsBk5WVhfj4eLz00ksAgOzsbMyZMwfPPvsscnNzNf2ys7PRt2/fBscqKCjXW5z29krk5JTobfym\nIIUJBjn74VT6WeyNPoFBzr6attH9XPDH+WRs3BeDXh0tIZO2nYVmrSE37RHzYriYG8PF3OimoSKv\n2X67OTo64vDhw9i0aRM2bdoEBwcHbNy4ET4+PoiKikJxcTHKysoQEREBX1/few/Yzo13HwWZIMXe\nhEOoVddqtttammBEXxfkFlUi7HJGC0ZIRESkP3orYKKjoxEaGopt27Zh/fr1CA0NrXd1kYmJCZYu\nXYonn3wS8+fPx6JFi6BUclrtXqxNrDDUxR95lQX4M+N8nbZg/04wkkuw61QCqmtULRQhERGR/ghi\nK7zzmT6n3VrTtF5xdQneOv0xTGWmeNt/GYykck3b5mM3sO9MMkb0c0Ho2G4QBKEFI20arSk37Qnz\nYriYG8PF3OjGIE4hUdOzMFJiRMchKKouxsm0P+u0TfR3R0cHcxy7mIaD51O0jEBERNQ6sYBp5Ua7\nDYeJ1AQHko6isrZKs93UWIYlIX1gZW6ETUdu4MI1Lk0nIqK2gwVMK2cmV2CU21CU1pThWOqpOm02\nFiZYEuIDI7kU3+26goSM4haKkoiIqGmxgGkDAjsOhZlcgcPJx1FeU1GnrZOTEv+c7IUalRpfbLmM\n3KIKLaMQERG1Hixg2gBTmQnGuI1ARW0F/kg5cVd73y52mDmqK4rLqvHF5ssor6ytZxQiIqLWgwVM\nGzHcdTAsjJQ4mhKGkurSu9pH+3bE6AGuSMstw5rtUahV8VEDRETUerGAaSOMpEYY5z4SVapqHEo6\nVm+fx0Z1Rd8udriSWICNB+N0emwDERGRIWIB04YEdHgI1sZWOJF2GoVVRXe1SyQCFjzcC26O5jgR\nmY7955JbIEoiIqIHxwKmDZFLZJjgMRo16locSDxSbx8TIxmWhPjAWmmMzUdvIjw2u5mjJCIienAs\nYNqYh5wGwN7UFqfSzyGvIr/ePtZKYywJ6QNjIym+230VN9Pvnq0hIiIyZCxg2hipRIpgj7FQiSrs\nTTystZ+boxLPTPZCrUqNL7dcRk4hl1cTEVHrwQKmDRrg6ANnM0eczbiA9NJMrf36dLbD7DHdUFxe\ngxWbI1FeWdOMURIREd0/FjBtkESQYHLn8RAh4pvLa+tdVv2Xkf1dMdavIzLyyrFqWzSXVxMRUavA\nAqaN8rbrhfHuo5FbmY+vL69FtUr77MqMwC7o19UOMUkF2HDgGpdXExGRwWMB04YFe4zBQKf+SCxO\nxrqrv0It1j+7IpEIWDDJC52clAi7nIG9Z5KaOVIiIqLGYQHThgmCgNk9QtDVyhOXcqKw/eZerX2N\njaRYEtIHNhbG+P14PM7FZDVjpERERI3DAqaNk0lkWOD9OBwVDvgj+QROpJ7W2tfK3BjPh/jAxEiK\n73fH4EYal1cTEZFhYgHTDijkCiz0eQJKuTk2xe1AdG6M1r6uDuZYOKU31GoRK7dcRjaXVxMRkQFi\nAdNO2Jna4GmfeZBJZPjhys9ILknV2re3py3mjO2G0ooarNgUiTIuryYiIgPDAqYdcbdwwzyvmahR\n1eDryJ+QX1mgte+Ifi4IGuiGzPxyrNrKp1cTEZFhYQHTzvS1741pXSeiqLoEayJ/QkWt9lNEIYGd\nMaCbPWKTC7FuXyyXVxMRkcFgAdMOBboOwXDXAKSXZeL7qI1QqVX19pMIAv4xqRc8nJU4FZ2J3X9y\neTURERkGFjDtkCAICOk6Cd52PRFbcB2/XtuqdXbFWC7Fc9P7wNbCBNtOxOPMVe2PJiAiImouLGDa\nKYkgwXyv2XBTuuB0xnkcSDqqta+luTGef6QPTI2l+HFPDOJSCpsxUiIioruxgGnHjKVGeLrPE7A2\ntsKu+P04n3lRa18Xe3MsnOoNUQS+2hqFrILyZoyUiIioLhYw7ZylsRILfZ6AidQEG2M24XpBvNa+\nXu42CB3XXbO8urSCy6uJiKhlsIAhdDB3wlPeoVBDxLdR65BVlq217zCfDhg/yA1ZBRX4amsUamq5\nvJqIiJofCxgCAPSw6YpZPUJQXluB1ZE/oqS6VGvf6cM7w7e7PeJSCrF2XwyXVxMRUbNjAUMa/s6+\nGO8+GrmV+fjm8lpUq+o/RSQRBPxjYi94drDAn1eysPNUYvMGSkRE7R4LGKoj2GMMBjr1R0JxMtZd\n/RVqsf5TREb/W15tZ2mCHScT8Gc0l1cTEVHzYQFDdQiCgNk9QtDVyhOXcqKw/eZerX0tzIzw/CM+\nMDWW4ad9MbiWrP3RBERERE2JBQzdRSaRYYH343BUOOCP5BM4kXpaa98OdmZYPLW3Znl1Zj6XVxMR\nkf6xgKF6KeQKLPR5Akq5OTbF7UB0bozWvj3dbfB4UHeUVdZixeZIlJRXN2OkRETUHrGAIa3sTG3w\ntM88yCQy/HDlZySXpGrtO7RPBwT7d0J2QQW+3BqFmtr6n69ERETUFO67gElMTGzCMMhQuVu4YZ7X\nTNSoavB15E/Ir9R+ncvUYZ4Y2NMBN1KL8ONePr2aiIj0p8ECZv78+XVer169WvP3N998Uz8RkcHp\na98b07pORFF1CdZE/oSK2op6+0kEAU8G90QXF0ucvZqF7WEJzRwpERG1Fw0WMLW1tXVenzlzRvN3\n/u+6fQl0HYLhrgFIL8vE91EboVLXf4pILpNi8XRv2FuZYNfpRJyKymjmSImIqD1osIARBKHO69uL\nljvbqG0TBAEhXSfB264nYguu49drW7UWsRaKW8urzUxkWLsvFrFJXF5NRERNq1HXwLBoad8kggTz\nvWbDTemC0xnncSDpqNa+zrZmWDTVG8Ct5dUZeWXNFSYREbUDDRYwRUVF+PPPPzV/iouLcebMGc3f\nqf0xlhrh6T7zYW1shV3x+3E+86LWvj06WWPe+B4or7q1vLqYy6uJiKiJyBpqtLCwqHPhrlKpxKpV\nqzR/p/bJ0tgCC32ewGcXVmNjzCZYGVuiq7VnvX0DvJ2RU1iBnacS8eXvl/HKzH6Qy6TNHDEREbU1\ngtgKr8bNySnR29j29kq9jt+WxOZfx6rIH2AiNcZLAxbB0cyh3n6iKOK7XVdx5moWBvZ0wIKHvSC5\nj9ORzI1hYl4MF3NjuJgb3djba58safAUUmlpKdauXat5/euvv2Ly5Ml47rnnkJub22QBUuvUw6Yr\nZvUIQXltBVZH/oiS6tJ6+wmCgPkTeqKrqyXOxWRj24n4Zo6UiIjamgYLmDfffBN5eXkAgISEBHz+\n+edYtmwZBg8ejA8++KBZAiTD5u/si/Huo5FbmY9vLq9Ftaqm3n5ymQSLp3nDwdoUe/5MQlhkejNH\nSkREbUmDBUxKSgqWLl0KADhw4ACCgoIwePBgPPbYY5yBIY1gjzEY6NQfCcXJWHf1V6hFdb39lAoj\nvPC/5dXrD1zD1cT8Zo6UiIjaigYLGIVCofn7uXPnMGjQIM1rLqmmvwiCgFk9QtDVyhOXcqKw/eZe\nrX0dbRR4dnofCAKwals00nK5vJqIiBqvwQJGpVIhLy8PycnJuHjxIgICAgAAZWVlqKio/3by1D7J\nJTIs8H4cjgoH/JF8AidST2vt262jFeZP6ImKqlp8sTkSRWVcXk1ERI3TYAHz1FNPYcKECZg0aRIW\nLlwIS0tLVFZWYtasWZgyZUpzxUithEKuwEKfJ6CUm2NT3A5E58Zo7evv5YQpQzyQW1SJL3+/jOoa\nPr2aiIh0d89l1DU1NaiqqoK5ublm28mTJzFkyBC9B6cNl1EbtsTiZKyI+AaCIOCF/k/DTelabz9R\nFPH97hj8eSUTvt3t8fSU3g0ur2ZuDBPzYriYG8PF3OjmvpdRp6enIycnB8XFxUhPT9f88fT0RHo6\nV5FQ/dwt3DDPayZqVDX4OvInFFQW1ttPEATMG98D3TtaIfxaDn4/frOZIyUiotaqwTvxjhw5Eh4e\nHrC3twdw98Mc169fr9/oqNXqa98b07pOxO/Xd2F15I94ccAzMJWZ3tVPLpNg0TRvfLDhAvadSYaD\nlSmG93VpgYiJiKg1abCAWb58OXbs2IGysjIEBwdj4sSJsLGxaa7YqJULdB2C3Ip8HE89he+jNmKh\nzxOQSu5+jIC5qRzPP9IHH6y/gA0H4mBnaQovD37PiIhIuwZPIU2ePBk//vgjVqxYgdLSUsyePRv/\n+Mc/sGvXLlRWVjZXjNRKCYKAkK6T4G3XE7EF1/Hrta3QdsmVo7UCz073hkQCrN4ehdSc+u/qS0RE\nBNyjgPmLs7MzFi5ciH379mHcuHF4//33W/QiXmo9JIIE871mw03pgtMZ53Eg6ajWvl1drfBEcE9U\nVKluLa8urWrGSImIqDXRqYApLi7Gxo0bMW3aNGzcuBH//Oc/sXev9puVEd3OWGqEp/vMh7WxFXbF\n78f5zIta+w7q5YSpwzyRV1yFlb9fRhWXVxMRUT0avAbm5MmT+P333xEdHY2xY8fi448/Rrdu3Zor\nNmpDLI0tsNDnCXx2YTU2xmyCtYkVulh51Nt3on8nZBeU41RUJr7bdRULpza8vJqIiNqfBu8D06NH\nD7i7u8PHxwcSyd2TNR999JFeg9OG94FpvWLzr2NV5A8wlZpg6YCFcDRzqLdfrUqNz3+7hNjkQgQN\ndMOMkV2YGwPFvBgu5sZwMTe6aeg+MA3OwPy1TLqgoADW1tZ12lJTU5sgNGpveth0xaweIdgYswmr\nI3/ES76LoTQyv6ufTHprefWHGy5g/7lk2FubYsbYHi0QMRERGaIGr4GRSCRYunQp3njjDbz55ptw\ndHTEwIEDERcXhxUrVjRXjNTG+Dv7Yrz7aORW5uOby2tRraqpt5+ZiRxLHvGBUiHHzwfjcDY6o5kj\nJSIiQ9VgAfOf//wHa9euxblz5/Dyyy/jzTffRGhoKM6cOYPNmzc3V4zUBgV7jIGfY38kFCdj3dVf\noRbV9fZzsDLFc9P7QCoV8MHac9geFg+1usGnXxARUTtwzxmYzp07AwBGjRqFtLQ0PP744/jqq6/g\n6OjYLAFS2yQIAmb3DEFXK09cyonC9pvaV7V1drHEq7P7w97KFDtPJeLzTZdQzCdYExG1aw0WMMId\nKz+cnZ0xZswYvQZE7YdcIsMC78fhqHDAH8kncCL1tNa+Hs4WWPHiCPh0tsXVxAK8/dM5xKXU/4wl\nIiJq+3S6D8xf7ixoiB6UQq7AQp8noJSbY1PcDkTnxmjtq1QY4dmQPggZ0RnFZTX45JeL2Hc2Sevd\nfYmIqO1qcBm1t7c3bG1tNa/z8vJga2sLURQhCAKOHTvW4OBxcXFYuHAh5s2bhzlz5iAjIwOvvfYa\namtrIZPJ8Omnn8Le3h47d+7EunXrIJFIMGPGDDzyyCMNjstl1G1PYnEyVkR8A0EQ8GL/Z9BRefcD\nHW/PzbXkAny98wqKSqvRt4sdnpzYE2Ym8uYOm8CfGUPG3Bgu5kY3DS2jbrCASUtLa3BgFxftTw0u\nLy/HP//5T7i7u6N79+6YM2cOli1bhuHDh2PChAn4+eefkZaWhsWLF2Pq1KnYsmUL5HI5QkJCsHHj\nRlhZWWkdmwVM23QpJxrfR22AhZE5XvZ9FtYmdb8Dd+amqKwa3+68gpikAthZmmDh1N5wd7Jo7rDb\nPf7MGC7mxnAxN7ppqICRvv32229ra7SwsGjwT0MEQcDEiRNx7do1mJqaok+fPggICED37t0hkUiQ\nmpqKuLg4WFpaIi8vD5MmTYJMJkNsbCyMjY3h4VH/XVoBoLxcfxdwmpkZ63V80s7JzAEmMhNczIlC\nbP51+Dn1hVzy96zKnbkxMZLC38sJoghE3sjFqagMmJvK4e6k5OnOZsSfGcPF3Bgu5kY3ZmbGWtsa\nvJHdg5DJZJDJ6g6vUCgAACqVCr/88gsWLVqE3Nxc2NjYaPrY2NggJyenwbGtrRWQyaRNH/T/NFTx\nkX7NsBuPMrEE+28cw/prv+LVYYsgk/yd6/pys2C6DwZ4OeGznyOw4WAcknLKsPiRvjA11tvXm+7A\nnxnDxdwYLubmwTT7v/AqlQqvvPIKBg0aBH9/f+zatatOuy4XZBYUlOsrPE7rGYDgjkFIK8zC5awY\nfHVyHWb1CIEgCA3mxs1Wgbfm+WLNjmicuJiG68kFeGZKb7ja332XX2pa/JkxXMyN4WJudNNQkdeo\nVUhN4bXXXkOnTp2wePFiAICDgwNyc3M17dnZ2XBwqP/5ONQ+SAQJ5nvNhpvSBaczzuNA0lGd9rOx\nMMGyWf0x1q8jMvLK8f66cJyK4t17iYjaomYtYHbu3Am5XI7nnntOs83HxwdRUVEoLi5GWVkZIiIi\n4Ovr25xhkQEylhrh6T7zYW1shV3x+xGeeVGn/WRSCR4b1RWLpnpDKhXww54YrN0Xg+oalZ4jJiKi\n5tTgKqQHER0djeXLlyMtLQ0ymQyOjo7Iy8uDsbExzM1vTet37twZb7/9Nvbv348ffvgBgiBgzpw5\nePjhhxscm6uQ2o/00kx8dmE1atU1+L/hi+Eo0b7y7U7ZBeVYvT0ayVmlcHMwxzNTe8PRWqHHaNsn\n/swYLubGcDE3urnvZdSGigVM+xKbfx2rIn8AADzsGYRRbsMgEXSbPKypVeGXw9dx/FI6TI2lmD++\nJ3x78BRlU+LPjOFibgwXc6Mbg7oGhqixeth0xbN9n4KlsRLbb+7Fmss/oaS6VKd95TIp5gb1wFMT\ne0GlFrF6ezT+e/g6alX1PzySiIhaBxYw1Cp0s+6MT8b9H3radMPVvGv46NwKXC+I13l//95OeONx\nXzjbKnAoPAXLf45AfnGlHiMmIiJ9avBGdoaKN7Jrn2wsLdBL2QtGEjmi8mJwJiMcAiTobOWu043r\nLMyMEODthLyiSkTF5+N0dCZc7M3haMPrYh4Ef2YMF3NjuJgb3TR0IzvOwFCrIhEkGOseiOf7PQ1L\nYwvsTjiAVZd+QHG1bueSTYxkeGpSL4SO647K6lqs2ByJrSduQq1udZeCERG1ayxgqFXqbOWO1wY+\nj962PRFbcB0fnvsPYvOv67SvIAgI7OeCf4X6ws7SBLtPJ+Hfv15EUWmVnqMmIqKmwgKGWi1zuRme\n7jMP07pMRFlNOb669D12xx+EWtTtAt1OTkq8Pd8P/braITa5EG//dB7Xkgv0HDURETUFFjDUqgmC\ngFFuw7B0wELYmFhhX+JhrLz4LQqrinTaX2Eix+Jp3pgR2AUl5TX45L8XsefPRKhb390FiIjaFRYw\n1Ca4W7jhVb/n0de+N64XxuOjcytwJe+aTvsKgoCgh9ywbHY/WJkb4/fj8Vi55TJKK2r0HDUREd0v\nFjDUZijkpvhH71A80m0yKmsrsTryB+y4uQ8qtW6PEejqaoW35vvBy8MGl2/m4Z2fziE+vVjPURMR\n0f1gAUNtiiAIGOEagKW+i2BnaouDSUex4uLXKKgs1Gl/C4URXnjEB1OGeCC/uAofbbyAw+EpOj0l\nnYiImg8LGGqT3JSueNVvCQY4+CC+KAkfnVuBqNyrOu0rkQh4eIgHXny0LxQmMvxy+DrW7LiCiqpa\nPUdNRES6YgFDbZapzATzvWZhZvdpqFZX4+vLa/H79V2oVetWiHh52ODt+QPR1dUS4bHZeHfteaRk\n6/YIAyIi0i8WMNSmCYKAIS6D8LLvs3BU2ONIShg+j1iD3Ip8nfa3Vhrj5Zn9EPSQG7IKKvD++nCE\nRabrOWoiIroXFjDULriYO+MV3+cw0Kk/kopT8PH5FbiUHaXTvjKpBDMCu+DZ6d6QSyX4aV8sfthz\nFVU1ul0cTERETY8FDLUbJjJjzO31GOb0nAGVWoXvojdgU9x21Kh0Wy7dr6s93prvh05OSpyKysQH\n68ORkVem56iJiKg+LGCo3fF39sUrfs/B2cwRx1NP47MLq5BdnqvTvvZWpvi/OQMQ2N8FqTlleHdd\nOM7FZOk5YiIiuhMLGGqXnM0c8YrvsxjsPBAppelYfv4LhGdd0mlfuUyC0LHdseDhXoAIfL3jCn4+\nGIeaWt0eYUBERA+OBQy1W0ZSI8zuGYJ5vWZChIifrvyCX2J/R7WOp5QG9XLCm/N84WJnhj8iUvHx\nzxeQW1ih56iJiAhgAUMEP6d+WOa3BC7mzjiVfhafhn+JzLJsnfZ1tjXD64/7YnBvJyRklOCdtedx\n6YZup6OIiOj+sYAhAuCosMfLAxZjmIs/0ssysfz8FzibcUGnfY2NpHgyuCfmje+Bqho1Vm65jM3H\nbkCl5iklIiJ9YQFD9D9yqRyPdp+KJ3vPgUSQYn3Mb9hwdROqVNX33FcQBAzz6YDXHx8ABytT7DuT\njE//ewkFJVXNEDkRUfvDAoboDv0d+uC1gUvgpnTFmcxwfHJ+JdJLM3Xa181RiTfn+WFAd3vEpRTi\nnZ/OISZRt5vmERGR7qRvv/322y0dRGOVl9/7f8T3y8zMWK/j0/1rztwo5Ao85DwAVaoqROfF4EzG\neSiNzNHR3AWCIDS4r1wmgV8PB5iZyHHpRi5ORWdCIgBdO1rdc9/WiD8zhou5MVzMjW7MzIy1tnEG\nhkgLuUSGkK4PY4H3XMgkcvwS+zvWXv0vKmsr77mvIAgY49cRr87uD2ulMbaFJWDFpkiU8B8sIqIm\nwQKG6B587L3wmt/z8LBwQ3jWJSw/vxIpJbo9D6mziyXemucHb09bRCfk4+2fzuNGWpGeIyYiavt4\nCukOnNYzXC2ZG4XcFA85DUCtWoWovKs4kxkOM5kp3JSu9zwtZCyX4qFejpBKJbh0IxenozIhl0rg\n4WwBiaT1n1Liz4zhYm4MF3OjG55CImoCUokUU7pMwDN95sNYaoTf4rbjh+iNqKi9983rJIKASYPd\n8dJj/WBmKsfmYzfxf9+ewamoDKjVYjNET0TUtnAG5g6sig2XoeTGQWEPX8e+SCpOxdX8a7iQdRme\nlp1gZWx5z33trUwx2NsJtSo1YpMLcOFaDs7HZsPSzAhOtopWeZGvoeSF7sbcGC7mRjcNzcCwgLkD\nv1SGy5ByYyozwUCn/hABROfG4ExGOIxlxnC3cNPplJK3py0G93ZGZXUtYpIKcS42G5E38mBraQIH\nK9NWVcgYUl6oLubGcDE3ummogBFEUWx189c5OSV6G9veXqnX8en+GWpuYvLjsO7KryipKYW3XS+E\n9pwBM7lC5/0z88uxPSwe52JuPb6gm6slpg3vjG4drfQVcpMy1LwQc2PImBvd2NsrtbaxgLkDv1SG\ny5BzU1RVjLVXf0VcwQ1YG1vhid6z4WnZqVFjJGeVYNuJeETezAMA9Pa0wbRhnnB3stBHyE3GkPPS\n3jE3hou50U1DBQxPId2B03qGy5BzYyIzxkCnfpAIAqJyY3AmMxxyiQwelvc+pfQXS3NjDPJygpeH\nDXIKK3A1sQDHL6UjLacULvbmUCqM9Pwu7o8h56W9Y24MF3OjG55CagRWxYarteQmruAm1l75BUXV\nJehl2x2P93wUSiPzRo0hiiKuJhVg6/F4JGQUQxCAwb2dMDnAA3ZWpnqK/P60lry0R8yN4WJudMNT\nSI3AL5Xhak25KakuxbqrvyImPw6WRhaY7zULXa09Gz2OKIq4dD0XW8PikZZTBqlEwPC+HTBxsDus\nzLX/z6Q5taa8tDfMjeFibnTDU0iNwGk9w9WacmMsNYKvY18YSeSIyru1SkmABJ2t3Bu1wkgQBDjb\nmmFEXxc42iiQnFWK6CXtFgYAACAASURBVIR8HI1IQ0V1LTo5KmEkl+rxndxba8pLe8PcGC7mRjdc\nRt0I/FIZrtaWG0EQ0NnKA92tuyAmPw6Xc68goSgJPW27wVjauNkTQRDQ0cEcI/q5wNrCGAkZJYiK\nz8exS2lQqUW4OSohl7XMfSlbW17aE+bGcDE3umEB0wj8Uhmu1pobGxMrPOQ8AJll2biafw3nMiPg\nYuYMe4Vto8eSSAS4O1kgsJ8LzEzluJFWjMs383AiMh1SiQA3R3NIJc1byLTWvLQHzI3hYm50wwKm\nEfilMlytOTdG/zulZCIzQVTuVZzNvID4wkTYK2xhbdL4+71IpRJ0cbHEiH4uMJJLcD21EJdu5OFU\nVCaMjaRwtTdvtucstea8tHXMjeFibnTDVUiNwAurDFdbyU1ycSp23NyH2ILrAICeNt0wwWNMo+8b\nc7vSihrsO5OEPy6korpWDQcrU0wZ6oGBvRwh0fNdfdtKXtoi5sZwMTf/3969x7Z1HmYDfw5v4k2k\nSIoXXa2br7LkS2yvSeykRez2i9MlTdLWaRZvfw0b0gHbkA1NvTZJt6GDi60Y1hbphrZDkaKoNydt\nmjlN7CBN6sZO7VRuLCu2db+LlChSonjRheT5/iBFiZbtkDIpvZSeH2C4FSXqCM97rCfv+55zMsOr\nkLLAQSWutZZN50QPXu85g+v+TgCJIvNQ7SHU3kGRmQjO4P/O9eLdPwwjFpdRYTfgsQN12LmxNG+P\nJ1hruawlzEZczCYzLDBZ4KAS11rNpnOiB6d6zqA9WWS2WTfjcO3BOyoy3okIXn2vB+euuCHLQG2Z\nCY/fX4dtNdZcHXbKWs1lLWA24mI2mWGByQIHlbjWejYd/m683nMG7RNdAOaLzCHUmquX/Z7D3hB+\ncbYbH1wfAwBsqS7BY/fXo6Hi45+cnam1nkshYzbiYjaZYYHJAgeVuNZLNh3+Lrze89ZCkbFtxkO1\nh1BjWn6R6XNP4ZXfdKO1O/GcpZ0NpXj0vjpUObK7Q/DNrJdcChGzERezyQwLTBY4qMS13rJp93fh\n9Z4z6JjoBgA02rbgodpD2GCqWv57DkzglXe70D44CQDYt9WBzx2og8ua+dOzb7TecikkzEZczCYz\nLDBZ4KAS13rNpt3fhVM9p9E50QMA2G7bgsN3UGRkWUZbjw8vv9uNPs8UFJKE/c0uPHxvLawmbdbv\nt15zKQTMRlzMJjMsMFngoBLXes5GlmV0THTh/7rPoGtyvshsxeHag3dUZH5/fQw/P9uNkfEwVEoJ\nn9xVgc/eXQOTIfMnX6/nXETHbMTFbDLDApMFDipxMZtE6Zifkema7AUANJVuxeGaQ6g2VS7rPeNx\nGefb3Hj1tz3wTk6jSK3Eob2V+H/7qqHXqj/265mLuJiNuJhNZlhgssBBJS5ms0CWZVz3d+JUzxl0\np4rMNhyuPYjq4uUVmWgsjt98OIzXzvViMjgLfZEKD36iGgfvqkKR5tYPjGQu4mI24mI2mWGByQIH\nlbiYzVILReY0uif7ACSKzEO1h1BVXLGs95yZi+HtlkG8fr4PoekoTAYNPnv3Bty/s+KmD4xkLuJi\nNuJiNplhgckCB5W4mM2t3azINJc24nDtIVQVly/rPcPTUZy+2I83Lw5gZjYGm6kID99bi3uaXGkP\njGQu4mI24mI2mWGByQIHlbiYzceTZRnX/B041X0GPYFEkdlR2ogH76DIBMKz+NX7fXi7ZQhz0Tic\nVj0ePVCLPVscUEgScxEYsxEXs8kMC0wWOKjExWwyJ8syrvk6cKrnNHoC/QCAHfbtOFxzEJXLLDL+\nqRm8dq4XZz9MPGepymHEY/fV4YFP1MDrDeby8ClHeM6Ii9lkhgUmCxxU4mI22ZNlGVd97TjVcwa9\nySKz074dh2sPocJYtqz3HPWH8epve/B+mwcygC0bLLhvRxl2b7RDo771Zl9aeTxnxMVsMsMCkwUO\nKnExm+WTZRkf+drxelqRacLh2oPLLjKDY0H84mwPWtoTz1nSFSmxb6sT9zaVob7clLenX1PmeM6I\ni9lkhgUmCxxU4mI2dy5RZK7jVM8Z9AUGANx5kZmFhNfe7cS5K274p2YAAC6rHvc2uXDP9jJYioty\ndvyUHZ4z4mI2mWGByQIHlbiYTe7Isoy28Wt4vect9E0liswuexMO1x5CudGV1XvN5xKPy/ioz4f3\nWt1oaR/DXDQOSQIaa63Y31SGXRtLoVZxiWkl8ZwRF7PJDAtMFjioxMVscm++yJzqOYP+qUEAwC5H\nMw7XHMy4yNwsl/D0HC5cHcV7rSPoGg4AAPRFKuzb5sT+pjLUlhVziWkF8JwRF7PJDAtMFjioxMVs\n8ufGIiNBwi5HEx7MoMh8XC4j4yG81+rGuSsjmAjOAgDKbHrsbyrDJxpdXGLKI54z4mI2mWGByQIH\nlbiYTf7Jsowr41fxes8Z9E8NQYKE3Y5mPFh7EGUG502/JtNc4nEZbb0+vNc6gpZ2L6KxxBJTU50N\n9zaVYWeDjUtMOcZzRlzMJjMsMFngoBIXs1k580XmVM8ZDHxMkVlOLqHkEtNvL4+gZySxxGTQLiwx\n1bi4xJQLPGfExWwywwKTBQ4qcTGblSfLMlq9H+H1njMYCA6niszh2oNwJYvMneYy5A3hXOsIzl1x\nYzKUWGKqKDXg3qYy3N3ohNnIJabl4jkjLmaTGRaYLHBQiYvZrB5ZlnE5WWQGk0XmLucOPFhzEE01\n9TnJJRaPo63Hh9+2uvGHjjFEYzIUkoTtdYmrmHY0lN70YZJ0azxnxMVsMnO7AqN84YUXXsjXN25v\nb8eRI0egUCjQ3NyMkZERPP300zh58iR+85vf4IEHHoBSqcQvf/lLHDt2DCdPnoQkSWhsbLzt+4bD\ns/k6ZBgMRXl9f1o+ZrN6JEmCy+DA/vI/QmVxOdzhUVz3d+Ls0HkMT7mhlXSwaM13tOyjkCQ4rXrs\n3eLAp3ZXwmbWYjI0i+sDE7h4bRS/bhmEf2oGZoMGZoOGS0wZ4DkjLmaTGYPh1jOweZuBCYfD+Iu/\n+AvU1NRg8+bNeOqpp/DVr34V9913Hx588EF8+9vfhsvlwuc+9zk8+uijOHnyJNRqNT7/+c/jJz/5\nCUpKSm753pyBWZ+YjTjichyt3o9wqucMhoIjAACr1oK9zl3Y59qVWl7KhcGxIM61unGuzY1Acomp\n0p5YYvpEowtmgyZn32ut4TkjLmaTmVWZgZEkCZ/97Gdx/fp16HQ6NDc345vf/Caee+45KJVKaLVa\nvPbaa3A4HBgfH8cf//EfQ6VS4dq1aygqKkJtbe0t35szMOsTsxHH/IzMveV/hD01jZidjqF/ahDX\n/Z34zdB5tHo/wmx8DlatFVrVne1hMRk0aKy14uCeStSWmxCNxdE5OInWbh/e+mAAvSNTUCkVcFh0\nUCg4K7MYzxlxMZvM3G4GRpWvb6pSqaBSpb99JBKBRpP4ryWbzYaxsTF4vV5YrdbU51itVoyNjeXr\nsIgohxSSAk2OLXApKnAk9jlc9n6Ei+4WfORrx8sdr+GVjv/DFutG7HPtxg77dhQplz9bolIqsLOh\nFDsbShGMzOH9Njfea3XjD51e/KHTC6NOjU9sc2J/cxmqnbf+rzYiWhvyVmA+zq1WrjJZ0bJY9FDl\n8X4Rt5uyotXFbMQ0n0uF6wAe3H4Ak9MBnOv/Pc72XcBVXzuu+tpRpCrCvoodOLDhj9Dk3AylYvnn\nsB1AbbUVX3pwG3qGJ/H2BwN45/eDeCv5p7bchAf2VuOTuyvX/VVMPGfExWzuzIoWGL1ej+npaWi1\nWng8HjgcDjgcDni93tTnjI6OYufOnbd9H78/nLdj5LqkuJiNmG6ei4Q9lj3YY9kDT3gMF92XcNHd\ngrN9F3C27wJMmmLsce7EXtcuVBkr7mhDrlGtwMN3b8DhfVVo7R7He61ufNjpxQ9evYL/fq0NzfU2\n7G8qQ1O9DSrl+rqKieeMuJhNZm5X8la0wNxzzz1488038cgjj+D06dM4cOAAduzYga997WsIBAJQ\nKpVoaWnBsWPHVvKwiCiPnHo7Plv3aTxUewg9gT5ccF9Ci+dDvD1wFm8PnIXL4MQ+5y7sce6CTWdZ\n9vdRKRXYtdGOXRvtCIRn8bs2D95rHcGlDi8udXhRrFfj7kYX7m0qQ5XDmMOfkIhWQ96uQrpy5QqO\nHz+OoaEhqFQqOJ1O/Ou//iueffZZzMzMoLy8HP/yL/8CtVqNN954Az/84Q8hSRKeeuopPPzww7d9\nb16FtD4xGzEtJ5doPIq28eu46G5B6/hVRONRAMDGkjrsde3CLnsz9GpdTo6v3zOF91rdON/mRjAy\nBwCodhoTVzFtc6JYv3avYuI5Iy5mkxneyC4LHFTiYjZiutNcwnMRXBq7jIvuS+iY6AYAqBQqNNm2\nYq9rNxptm6FS3PlkcTQWx+WucbzXOoLLXeOIxWUoFRJ2NpTi3qYybK+zrrklJp4z4mI2mWGByQIH\nlbiYjZhymct4xI8PPJdwwd0Cd3gUAGBQ6bHbuQP7XLtQa9qQkxvYBUKzeP8jD357eQSDY0EAgEmv\nxicaXdi71YFal2lNXJLNc0ZczCYzLDBZ4KASF7MRUz5ykWUZg8FhXHC34KLnEqZmEyWjVGvFXtdu\n7HXtglNvz8n36fcE8V7rCN7/yJNaYjLq1NheZ0VTnQ3ba60Fu8zEc0ZczCYzLDBZ4KASF7MRU75z\nicVjaPd34XfuFnw41orZeKJkbDBVYZ9rN+5y7ECx5s435c5F47jSPY4Pu7y43DWOiWDiJmMSgNpy\nE5rqbGiut2GDqxiKAnmMAc8ZcTGbzLDAZIGDSlzMRkwrmct0dAaXvW244G7BNV8HZMhQSApss27C\nXtduNJdug+YObpY3T5ZlDI6F0No9jstd4+gcnEQ8+U9lsV6N7bVWNNXbsL3WBqNOfcffL194zoiL\n2WSGBSYLHFTiYjZiWq1cJmem8HvPJVzwXMLA1BAAQKsswk57E/a6dmGTpR4KKTebcsPTc/io14/L\n3eNo7R7H5PzsjATUlZnQVG9DU514szM8Z8TFbDLDApMFDipxMRsxiZDLSMiDi+7E5l//zAQAoKTI\njD3Ondjn2o0KY1nOvpcsyxgYDaK1exytXePoHAqkZmdMejW21yXKTGOtddVnZ0TIhm6O2WSGBSYL\nHFTiYjZiEimXuBxH10QvLnpa0DJ6GZHoNACgwliGvc5d2OPcCYv21k+6X47w9Bzaev1o7UrOzoQW\nZmfqy81oqrOiub4UVU7jis/OiJQNpWM2mWGByQIHlbiYjZhEzWUuNocr49dw0d2CK+PXEJNjkCBh\no6Ue+1y7sdO+HTqVNqffMy7LGPAkZmcud4+ja2gS8//CmgwaNCX3zjTWWmHQ5n92RtRsiNlkigUm\nCxxU4mI2YiqEXIJzIVwavYwL7kvonuwFAKgVKjSXNmKfaze2Wjfd0cMlbyU0PYe2Hl9idqbHh8Di\n2ZkKc+LKpjobqp3GnNzf5kaFkM16xWwywwKTBQ4qcTEbMRVaLt7IeGK/jKcFo+HEg2SNagPucu7A\nPtdubCiuykuZiMsy+j1TyaUmH7qGF2ZnzAYNmupsidmZGgv0OZqdKbRs1hNmkxkWmCxwUImL2Yip\nUHORZRn9U4P4nbsFv/f8AcG5EIDE5t8t1o3Yat2ELZaNMGoMefn+wUhydiZ5ZdNUOHF/G4UkoaFi\n4cqmKsfyZ2cKNZv1gNlkhgUmCxxU4mI2YloLucTiMVz1teOi5xKu+toRmgsDACRIqCouxxbrJmy1\nbkKdeUNOnst0o7gso889lbqyqXs4gPl/mEuMGmxPLjVtq7FCr838+6+FbNYqZpMZFpgscFCJi9mI\naa3lEpfjGJwaxlVfO6762tE92YeYHAMAaJQabCqpSxUap96el+WmYGQOV3rGU8tN8484UCqk5N6Z\nxJVNlXbDbb//WstmLWE2mWGByQIHlbiYjZjWei7T0Rl0TnQnC00HPMmHTAKApagEW60bscW6CZut\nDTCqc7/cND87czl5mXbPotkZS3ERttda0VyfmJ3RFaXPzqz1bAoZs8kMC0wWOKjExWzEtN5y8U37\ncc3Xgau+dlz3dSIUXVhuqi6uTBWaWnN1XpabAuHZ1N6ZKzfMzjRUmNGc3DtTYTfA4TCtq2wKyXo7\nb5aLBSYLHFTiYjZiWs+5xOU4BqaGcNXXgWu+dnRN9iIuxwEARUoNNlnqU8tNDl1pzpeb4nEZPe5A\n6iZ6vSNTabMzd21xorJUj42VZris+rwsd9HyrOfzJhssMFngoBIXsxETc1kwHZ1Gx0R3qtB4wmOp\n16xay8Jyk6UBBrU+598/EJ5FW7cPl7vHcaV7HKHpaOo1g1aFhgozGirNaKgwo6bMhCJ17u99Q5nh\neZMZFpgscFCJi9mIibnc2njEj2v+xN6Z674OhKMRAInlpg2mqoXlJlN1zm+kF4/LCMdkXGwdRsfQ\nJDoHJ+GdnE69rlRIqHYa0VBRkio1luKinB4D3RrPm8ywwGSBg0pczEZMzCUzcTmO/qlBXB1P7J/p\nCfSllpu0yiJssjQk7z+zEfYcLTfdmM1EcAadg5PoHEr86XNPIRZf+BVgM2lTZaahwoxKhwFKRW6e\n6E3peN5khgUmCxxU4mI2YmIuyxOJTqPD35VabhqNeFOv2bSW1N6ZzZZ66Je53PRx2czOxdDrnkoU\nmmSxmd8UDABFGiXqykxoqDBjY6UZdeXmrO5DQ7fG8yYzLDBZ4KASF7MRE3PJDW/Eh2vJS7Wv+zsR\nWbTcVGOqwhbrJmyzbcKG4qqMl5uyzUaWZXj8kWSZmUDnUADD3lDqdQlAud2AjRVm1Cf30zhKdNwc\nvAw8bzLDApMFDipxMRsxMZfci8VjieWmZKHpDfQvWm7SYvOiq5vsetst3ycX2QQjc+genkzN0nQP\nBzAbjadeN+nVqK8wY2NlCRoqzNjgKoZaxWWnj8PzJjMsMFngoBIXsxETc8m/SDSC9uRy01VfO7yR\n8dRrpVorttgWlpt0Kl3qtXxkE43FMTAaROfQJLqGJtExOAn/1EzqdZVSQo3LlLriqb7CDLNBk9Nj\nWAt43mSGBSYLHFTiYjZiYi4rbyw8vujqpk5MxxJXFykkRWq5aat1E/bUbYVvPJz34/EFptGxaHPw\ngCeI+KJfLY4SXdrm4HK7AYp1vuzE8yYzLDBZ4KASF7MRE3NZXbF4DH3J5aZrvnb0TPZDTt7OTqsq\nQpWxAjWmatSYq1FjqkJJkTnvxzQ9G0XPyMLm4K6hSYRnFu5JoytSob7clCo1deUmaDXra3Mwz5vM\nsMBkgYNKXMxGTMxFLOG5CNonunB1/Dp6g/0YCrhThQYASorMiUJjqkKNqRrVpkoUKfO7xBOXZYx4\nQ6kZms7BSXj8kdTrkgRUOYxpN9qzmbRrenMwz5vMsMBkgYNKXMxGTMxFXHZ7MfpHxtAXGEBvYAC9\ngX70BvoxNRtMfY5CUqDM4EyWmkSxcRkcUEj53YgbCM+ia9GyU8/IFKKxhc3BJUYNGpIbgzdWmlHl\nMEKlXDubg3neZIYFJgscVOJiNmJiLuK6WTayLMM/M5EoNJOJQtM/NYS5+ML9X7TKIlQXV6aWnWpM\n1TAXmfJ6rHPROPo9U+hILjl1DE0iEJpNva5WKVBRakCVw5j2R69V5/W48oXnTWZuV2DW16IjEdE6\nJ0kSrFoLrFoLdjuaAST20QyH3IkZmsnETE37RBfaJ7pSX2cpKkmUGXNipqa6uAKaHC49qVUK1Cfv\nLwMkitbY5HRqlqZreBKDY0H0utN/6dtM2vRS4zTCXqJb95uE1wPOwNyArVhczEZMzEVcd5JNJBpB\nX2AwtezUOzmAqbn0padygys1Q1NjroZTb8/r0lM0FofbF8bAaDDtz+KZGiBxB+FKuwFVjuJUsam0\nG4TaKMzzJjNcQsoCB5W4mI2YmIu4cpmNLMvwTfuThSYxSzMwNYS5+MLVRVqlFhtMlQubhM3VMGlu\n/QsoVyaDM0tKzch4OO1SbgmA3aJDlcOIaocxVW6spqJV2SzM8yYzLDBZ4KASF7MRE3MRV76zicVj\nGAqOpJUaT3gs7XOsWsvCLI2pGlXFFdAo879vZS4aw7A3jP7RKQyMBjGYLDah6Wja5+mLVEuWoCpK\nDVCrcvt08BvxvMkMC0wWOKjExWzExFzEtRrZhOfC6UtPgQEE5xaep6SQFKgwlqVdyu3Ql+b9qicg\nuYF5agb9N8zWjPrCWPyLUCFJcNn0SzYMmw2anM3W8LzJDAtMFjioxMVsxMRcxCVCNrIsY3zal7zi\nKbn0FBxGdNHSk06lxYbiqrSrnoo1xhU7xpnZGAa96aVmcDSI6dlY2ucV69U3lJpilNn0y7q8W4Rs\nCgELTBY4qMTFbMTEXMQlajbReBRDwRH0JDcH9wX6MRrxpn2OTWtNu+qpylgO9QosPc2LyzK8E5El\ne2u8k9Npn6dUSCgvNST31cwvQxXDqLv9sYqajWhYYLLAQSUuZiMm5iKuQsomNBdOu9leX2AAobmF\n5zgpJAUcejvKDE6UG5woN7hQZnTBrrOtyPLTvPB0FINj84Umsb9maCyU9oRuALAUFy1ZgnJa9FAo\nEktQhZTNamKByQIHlbiYjZiYi7gKORtZljEWGU/to+kPDGIk5Ek9uHKeWqGCS++Ay+BCuTFZbAwu\nWLUlK3Z1UTwuw+Nfenn34qd0A4BGpUCFPXEzvo0bbDBqFHDZ9Cg1a6FUrJ27DOcSC0wWCvmEX+uY\njZiYi7jWWjayLGNiZhLDITeGg26MhDwYCbkxEhpNu5MwkLibsCs5W1NmdKWKjUljXLFiMxWeXVJq\nhr0hxOLpv3aVCgn2Eh1cVj1cVj2c1oX/bcrhxuFCxDvxEhFRwZMkCRZtCSzaEjTatqQ+Hpfj8EZ8\nGAm5MRycLzUe9E8lroZazKDSo2zRTE250YUygxMGtT7nx1us12BbjRXbaqypj0VjcbjHwwhHZVzv\nHYfHF4bHF4Y7+edGuiIlnJb5YqNPFRuHRQdd0fr+Fb6+f3oiIip4if0xpXDoS7HDvj318Wg8itGw\nN1FsQp7EjE3Qja6JXnRO9KS9h1lTvKjQJJajXHontKqinB6rSqlApcMIu70Ym8oXZhdkWUYwMgeP\nL4IRXwgeXyRVbAbHQkseoQAkHni5uNjM/11q1q6pB1/eCgsMERGtSSqFCuXGRCm5a9HHZ2OzcIdH\nMRL0YDg5WzMcdOOavwPX/B1p72HTWtJmasoMLrj09pxfESVJEor1GhTrNWioNKe9Fo/L8AWmU7M0\n7tSsTQTX+ydwrX8i7fOVCgmlJTq4LDq4bMliY9HDZdPn9F42q417YG6w1taM1xJmIybmIi5mk51I\nNIKR0ChGkvtrhkNuDIfcmJoNpn2eBAkOfWmi2KT22Dhh15VCqcjsDr65ymZ2LoZRfyS92PjDcI+H\nl9x1GEg8J2q+zDgtyb02Nj2cFr2QS1LcA0NERPQxdCod6swbUGfekPbxqdlgcsNwcsYmmFiS8oRb\n8Yex1tTnqSQlnAZHaqam3OBEudEFq9aSt0u9NWolKh1GVDqW3vgvGJlLFJvxMDz+hdmbIW8IfZ6l\n5cls1MBlSd9r47TqYC/RCbkkxQJDRER0G8UaI4o1Rmyy1Kc+JssyJmcDqauhEsUmsYF4KDiS9vUa\nhRplhuQSVHID8VZ9LWRZldd72Bh1ajRUmNFQccOSlLywJOXxpc/etA9M4PpA+pKUQpJgL9HeUGwS\nf5cYV29JiktIN+CUq7iYjZiYi7iYzcqLy3H4pv2pfTXze2w8oVFE5fRHE6gUKpRqrbDrS+HQlab+\nduhLYS4yregN+ubNRWPw+CNpV0bNl5xgZG7J5xeplbhnuwtHP7M5L8fDJSQiIqIVoJAUKNXZUKqz\noal0W+rjsXgMYxFv4mqooBuT8QkM+N0Yi3jhDo8ueR+1Qg27zrao3NhSJcesMeVt1kOtUqLSbkSl\n/eZLUp4lG4nDiMbiN3mn/GOBISIiyjOlQgmXwQmXwQk4mlOzY7IsIzgXwljEi9GwF2NhL0YjC38P\nh9xL3kuj1MCus6XN2tiTl5EXq/N3oz6jTg1jhRn1NyxJrRYWGCIiolUiSVJqj02duSbtNVmWEZgN\nLpSbRX+Phb1L9toAiTsQ37gkNf+3Qa1fM5dQAywwREREQpIkCeaiYpiLitFQUpv22vwm4pvN2rhD\nHgxMDS15P51Kt2Q5ypEsN/o83Ik431hgiIiICowkSSgpMqOkyJx2dRSQ2Eg8MTO5ZNZmNDyOoeAw\n+qYGlryfQa2/6ayNXV8KnUq7Uj9WVlhgiIiI1hCFpIBVa4FVa8EWbEx7LS7H4Z+eSJuxmf+7b2oQ\nPTc8OwoAitXGJXtt7LpS2HW2nD9qIRssMEREROuEQlLAprPCprNiq3VT2muxeAy+W5Sb3kA/uid7\nl7yfWVOMva7deLThoRX6CRawwBARERGUCiXsehvsehtgS7+vSzQexfi0P73YJJem/NMTt3jH/GKB\nISIiottSKVRw6u1w6u2rfSgp4j3cgIiIiOhjsMAQERFRwWGBISIiooLDAkNEREQFhwWGiIiICg4L\nDBERERUcFhgiIiIqOCwwREREVHBYYIiIiKjgrOideEOhEL7yla9gcnISc3Nz+PKXvwy73Y4XXngB\nALB582Z84xvfWMlDIiIiogK0ogXm5z//OWpra/HMM8/A4/Hgz/7sz2C323Hs2DE0NzfjmWeewbvv\nvov7779/JQ+LiIiICsyKLiFZLBZMTCQe+hQIBFBSUoKhoSE0NzcDAD71qU/h/PnzK3lIREREVIBW\ndAbmoYcewiuvvIJDhw4hEAjgxRdfxD/+4z+mXrfZbBgbG/vY97FY9FCplHk7Tru9OG/vTXeG2YiJ\nuYiL2YiL2dyZFS0wr776KsrLy/HDH/4Q165dw5e//GUUFy8EKMtyRu+Tz/JCRERE4lvRAtPS0oL9\n+/cDALZs2YKZhbS6FgAABsxJREFUmRlEo9HU6x6PBw6HYyUPiYiIiArQiu6B2bBhAz788EMAwNDQ\nEAwGA+rr6/HBBx8AAE6fPo0DBw6s5CERERFRAZLkTNdtciAUCuHYsWMYHx9HNBrFX//1X8Nut+O5\n555DPB7Hjh078NWvfnWlDoeIiIgK1IoWGCIiIqJc4J14iYiIqOCwwBAREVHBYYFZ5Jvf/CaOHDmC\nJ554ApcvX17tw6FFvvWtb+HIkSN4/PHHcfr06dU+HFpkenoaBw8exCuvvLLah0KL/PKXv8TDDz+M\nxx57DO+8885qHw4hsQ/0r/7qr3D06FE88cQTOHv27GofUkFb0cuoRXbhwgX09fXhxIkT6OrqwrFj\nx3DixInVPiwC8P7776OjowMnTpyA3+/Ho48+ik9/+tOrfViU9OKLL8JsNq/2YdAifr8f3/ve9/Dy\nyy8jHA7jO9/5Dj75yU+u9mGtezd7nM4bb7yx2odVsFhgks6fP4+DBw8CAOrr6zE5OYlgMAij0bjK\nR0Z79+5NPW7CZDIhEokgFotBqeQNDVdbV1cXOjs7+ctRMOfPn8fdd98No9EIo9GIf/qnf1rtQyIk\nHqdz/fp1AInH6VgsllU+osLGJaQkr9ebNpisVmtGjzWg/FMqldDr9QCAkydP4r777mN5EcTx48fx\n7LPPrvZh0A0GBwcxPT2Nv/zLv8STTz7JZ8wJ4qGHHsLw8DAOHTqEp556Cl/5yldW+5AKGmdgboFX\nl4vnrbfewsmTJ/GjH/1otQ+FAPziF7/Azp07UVVVtdqHQjcxMTGB7373uxgeHsaf/umf4te//jUk\nSVrtw1rXbnyczrFjx7h37A6wwCQ5HA54vd7U/x8dHYXdbl/FI6LFzp49i+9///v4wQ9+kPb8LFo9\n77zzDgYGBvDOO+/A7XZDo9HA5XLhnnvuWe1DW/dsNht27doFlUqF6upqGAwG+Hw+2Gy21T60de3G\nx+mMjo5yOfwOcAkp6d5778Wbb74JAGhra4PD4eD+F0FMTU3hW9/6Fv7zP/8TJSUlq304lPTv//7v\nePnll/E///M/+MIXvoCnn36a5UUQ+/fvx/vvv494PA6/349wOMz9FgK42eN0WF6WjzMwSbt370Zj\nYyOeeOIJSJKE559/frUPiZJef/11+P1+/M3f/E3qY8ePH0d5efkqHhWRuJxOJz7zmc/gi1/8IgDg\na1/7GhQK/vfqajty5AiOHTuGp556CtFoFC+88MJqH1JB46MEiIiIqOCwkhMREVHBYYEhIiKigsMC\nQ0RERAWHBYaIiIgKDgsMERERFRwWGCLKq8HBQWzfvh1Hjx5NPYX3mWeeQSAQyPg9jh49ilgslvHn\nf+lLX8Lvfve75RwuERUIFhgiyjur1YqXXnoJL730En72s5/B4XDgxRdfzPjrX3rpJd7wi4jS8EZ2\nRLTi9u7dixMnTuDatWs4fvw4otEo5ubm8Nxzz2Hbtm04evQotmzZgqtXr+LHP/4xtm3bhra2NszO\nzuLrX/863G43otEoHnnkETz55JOIRCL427/9W/j9fmzYsAEzMzMAAI/Hg7/7u78DAExPT+PIkSP4\n/Oc/v5o/OhHlCAsMEa2oWCyGM2fO4K677sLf//3f43vf+x6qq6uXPNxOr9fjJz/5SdrXvvTSSzCZ\nTPi3f/s3TE9P4/Dhwzhw4ADOnTsHrVaLEydOYHR0FA888AAA4Fe/+hXq6urwjW98AzMzM/jf//3f\nFf95iSg/WGCIKO98Ph+OHj0KAIjH49izZw8ef/xx/Md//Af+4R/+IfV5wWAQ8XgcQOLxHjf68MMP\n8dhjjwEAtFottm/fjra2NrS3t+Ouu+4CkHgwa11dHQDgwIED+OlPf4pnn30W999/P44cOZLXn5OI\nVg4LDBHl3fwemMWmpqagVquXfHyeWq1e8jFJktL+vyzLkCQJsiynPetnvgTV19fj1KlTuHjxIt54\n4w38+Mc/xs9+9rM7/XGISADcxEtEq6K4uBiVlZV49913AQA9PT347ne/e9uv2bFjB86ePQsACIfD\naGtrQ2NjI+rr63Hp0iUAwMjICHp6egAAr732GlpbW3HPPffg+eefx8jICKLRaB5/KiJaKZyBIaJV\nc/z4cfzzP/8z/uu//gvRaBTPPvvsbT//6NGj+PrXv44/+ZM/wezsLJ5++mlUVlbikUcewdtvv40n\nn3wSlZWVaGpqAgA0NDTg+eefh0ajgSzL+PM//3OoVPxnj2gt4NOoiYiIqOBwCYmIiIgKDgsMERER\nFRwWGCIiIio4LDBERERUcFhgiIiIqOCwwBAREVHBYYEhIiKigsMCQ0RERAXn/wPzLNu0262UTQAA\nAABJRU5ErkJggg==\n","text/plain":["<matplotlib.figure.Figure at 0x7f942da6b550>"]},"metadata":{"tags":[]}}]},{"metadata":{"id":"0i7vGo9PTaZl","colab_type":"text"},"cell_type":"markdown","source":[" ### 해결 방법\n","\n","해결 방법을 보려면 아래를 클릭하세요."]},{"metadata":{"id":"3tAWu8qSTe2v","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["def construct_feature_columns():\n","  \"\"\"Construct the TensorFlow Feature Columns.\n","\n","  Returns:\n","    A set of feature columns\n","  \"\"\" \n","  households = tf.feature_column.numeric_column(\"households\")\n","  longitude = tf.feature_column.numeric_column(\"longitude\")\n","  latitude = tf.feature_column.numeric_column(\"latitude\")\n","  housing_median_age = tf.feature_column.numeric_column(\"housing_median_age\")\n","  median_income = tf.feature_column.numeric_column(\"median_income\")\n","  rooms_per_person = tf.feature_column.numeric_column(\"rooms_per_person\")\n","  \n","  # Divide households into 7 buckets.\n","  bucketized_households = tf.feature_column.bucketized_column(\n","    households, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"households\"], 7))\n","\n","  # Divide longitude into 10 buckets.\n","  bucketized_longitude = tf.feature_column.bucketized_column(\n","    longitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"longitude\"], 10))\n","  \n","  # Divide latitude into 10 buckets.\n","  bucketized_latitude = tf.feature_column.bucketized_column(\n","    latitude, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"latitude\"], 10))\n","\n","  # Divide housing_median_age into 7 buckets.\n","  bucketized_housing_median_age = tf.feature_column.bucketized_column(\n","    housing_median_age, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"housing_median_age\"], 7))\n","  \n","  # Divide median_income into 7 buckets.\n","  bucketized_median_income = tf.feature_column.bucketized_column(\n","    median_income, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"median_income\"], 7))\n","  \n","  # Divide rooms_per_person into 7 buckets.\n","  bucketized_rooms_per_person = tf.feature_column.bucketized_column(\n","    rooms_per_person, boundaries=get_quantile_based_boundaries(\n","      training_examples[\"rooms_per_person\"], 7))\n","  \n","  # YOUR CODE HERE: Make a feature column for the long_x_lat feature cross\n","  long_x_lat = tf.feature_column.crossed_column(\n","  set([bucketized_longitude, bucketized_latitude]), hash_bucket_size=1000) \n","  \n","  feature_columns = set([\n","    bucketized_longitude,\n","    bucketized_latitude,\n","    bucketized_housing_median_age,\n","    bucketized_households,\n","    bucketized_median_income,\n","    bucketized_rooms_per_person,\n","    long_x_lat])\n","  \n","  return feature_columns"],"execution_count":0,"outputs":[]},{"metadata":{"id":"-_vvNYIyTtPC","colab_type":"code","colab":{"autoexec":{"startup":false,"wait_interval":0}}},"cell_type":"code","source":["_ = train_model(\n","    learning_rate=1.0,\n","    steps=500,\n","    batch_size=100,\n","    feature_columns=construct_feature_columns(),\n","    training_examples=training_examples,\n","    training_targets=training_targets,\n","    validation_examples=validation_examples,\n","    validation_targets=validation_targets)"],"execution_count":0,"outputs":[]},{"metadata":{"id":"ymlHJ-vrhLZw","colab_type":"text"},"cell_type":"markdown","source":[" ## 선택 과제: 더 많은 합성 특성 실험\n","\n","지금까지는 단순한 버킷화 열 및 특성 교차를 시험했지만, 이외에도 수많은 조합을 통해 결과를 개선할 수 있습니다. 예를 들어 여러 열을 교차할 수 있습니다. 버킷 수에 변화를 주면 어떻게 될까요? 다른 합성 특성을 생각해 볼 수 있을까요? 모델을 개선하는 효과가 있나요?"]}]}